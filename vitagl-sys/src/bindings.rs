/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const _NEWLIB_VERSION_H__: u32 = 1;
pub const _NEWLIB_VERSION: &[u8; 6] = b"4.1.0\0";
pub const __NEWLIB__: u32 = 4;
pub const __NEWLIB_MINOR__: u32 = 1;
pub const __NEWLIB_PATCHLEVEL__: u32 = 0;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __ATFILE_VISIBLE: u32 = 1;
pub const __BSD_VISIBLE: u32 = 1;
pub const __GNU_VISIBLE: u32 = 0;
pub const __ISO_C_VISIBLE: u32 = 2011;
pub const __LARGEFILE_VISIBLE: u32 = 0;
pub const __MISC_VISIBLE: u32 = 1;
pub const __POSIX_VISIBLE: u32 = 200809;
pub const __SVID_VISIBLE: u32 = 1;
pub const __XSI_VISIBLE: u32 = 0;
pub const __SSP_FORTIFY_LEVEL: u32 = 0;
pub const _POSIX_OPT_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const __NEWLIB_H__: u32 = 1;
pub const _WANT_IO_LONG_LONG: u32 = 1;
pub const _WANT_REGISTER_FINI: u32 = 1;
pub const _REENT_CHECK_VERIFY: u32 = 1;
pub const _MB_LEN_MAX: u32 = 1;
pub const _ICONV_ENABLED: u32 = 1;
pub const HAVE_INITFINI_ARRAY: u32 = 1;
pub const _ATEXIT_DYNAMIC_ALLOC: u32 = 1;
pub const _HAVE_LONG_DOUBLE: u32 = 1;
pub const _HAVE_CC_INHIBIT_LOOP_TO_LIBCALL: u32 = 1;
pub const _LDBL_EQ_DBL: u32 = 1;
pub const _FVWRITE_IN_STREAMIO: u32 = 1;
pub const _FSEEK_OPTIMIZATION: u32 = 1;
pub const _WIDE_ORIENT: u32 = 1;
pub const _UNBUF_STREAM_OPT: u32 = 1;
pub const _WANT_USE_LONG_TIME_T: u32 = 1;
pub const __GNUCLIKE_ASM: u32 = 3;
pub const __GNUCLIKE___TYPEOF: u32 = 1;
pub const __GNUCLIKE___OFFSETOF: u32 = 1;
pub const __GNUCLIKE___SECTION: u32 = 1;
pub const __GNUCLIKE_CTOR_SECTION_HANDLING: u32 = 1;
pub const __GNUCLIKE_BUILTIN_CONSTANT_P: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VARARGS: u32 = 1;
pub const __GNUCLIKE_BUILTIN_STDARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_VAALIST: u32 = 1;
pub const __GNUC_VA_LIST_COMPATIBILITY: u32 = 1;
pub const __GNUCLIKE_BUILTIN_NEXT_ARG: u32 = 1;
pub const __GNUCLIKE_BUILTIN_MEMCPY: u32 = 1;
pub const __CC_SUPPORTS_INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE: u32 = 1;
pub const __CC_SUPPORTS___INLINE__: u32 = 1;
pub const __CC_SUPPORTS___FUNC__: u32 = 1;
pub const __CC_SUPPORTS_WARNING: u32 = 1;
pub const __CC_SUPPORTS_VARADIC_XXX: u32 = 1;
pub const __CC_SUPPORTS_DYNAMIC_ARRAY_INIT: u32 = 1;
pub const ARG_MAX: u32 = 65536;
pub const CHILD_MAX: u32 = 40;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const OPEN_MAX: u32 = 64;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const IOV_MAX: u32 = 1024;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 0;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const MB_LEN_MAX: u32 = 1;
pub const NL_ARGMAX: u32 = 32;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_SPIN_LOCKS: u32 = 200112;
pub const _POSIX_BARRIERS: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKADDR: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: u32 = 1;
pub const _POSIX_TIMEOUTS: u32 = 1;
pub const _UNIX98_THREAD_MUTEX_ATTRIBUTES: u32 = 1;
pub const _POSIX_MONOTONIC_CLOCK: u32 = 200112;
pub const _POSIX_TIMERS: u32 = 1;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_STACK_MIN: u32 = 32768;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_THREADS_MAX: u32 = 64;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const SEM_VALUE_MAX: u32 = 32767;
pub const INCLUDE_NP: u32 = 1;
pub const __have_longlong64: u32 = 1;
pub const __have_long64: u32 = 1;
pub const ___int8_t_defined: u32 = 1;
pub const ___int16_t_defined: u32 = 1;
pub const ___int32_t_defined: u32 = 1;
pub const ___int64_t_defined: u32 = 1;
pub const ___int_least8_t_defined: u32 = 1;
pub const ___int_least16_t_defined: u32 = 1;
pub const ___int_least32_t_defined: u32 = 1;
pub const ___int_least64_t_defined: u32 = 1;
pub const __int20: u32 = 2;
pub const __int20__: u32 = 2;
pub const __INT8: &[u8; 3] = b"hh\0";
pub const __INT16: &[u8; 2] = b"h\0";
pub const __INT64: &[u8; 2] = b"l\0";
pub const __FAST8: &[u8; 3] = b"hh\0";
pub const __FAST16: &[u8; 2] = b"h\0";
pub const __FAST64: &[u8; 2] = b"l\0";
pub const __LEAST8: &[u8; 3] = b"hh\0";
pub const __LEAST16: &[u8; 2] = b"h\0";
pub const __LEAST64: &[u8; 2] = b"l\0";
pub const __int8_t_defined: u32 = 1;
pub const __int16_t_defined: u32 = 1;
pub const __int32_t_defined: u32 = 1;
pub const __int64_t_defined: u32 = 1;
pub const __int_least8_t_defined: u32 = 1;
pub const __int_least16_t_defined: u32 = 1;
pub const __int_least32_t_defined: u32 = 1;
pub const __int_least64_t_defined: u32 = 1;
pub const __int_fast8_t_defined: u32 = 1;
pub const __int_fast16_t_defined: u32 = 1;
pub const __int_fast32_t_defined: u32 = 1;
pub const __int_fast64_t_defined: u32 = 1;
pub const WINT_MIN: u32 = 0;
pub const SCE_KERNEL_THREAD_ID_SELF: u32 = 0;
pub const SCE_KERNEL_PROCESS_ID_SELF: u32 = 0;
pub const SCE_UID_NAMELEN: u32 = 31;
pub const SCE_OK: u32 = 0;
pub const SCE_KERNEL_1KiB: u32 = 1024;
pub const SCE_KERNEL_2KiB: u32 = 2048;
pub const SCE_KERNEL_4KiB: u32 = 4096;
pub const SCE_KERNEL_8KiB: u32 = 8192;
pub const SCE_KERNEL_16KiB: u32 = 16384;
pub const SCE_KERNEL_32KiB: u32 = 32768;
pub const SCE_KERNEL_64KiB: u32 = 65536;
pub const SCE_KERNEL_128KiB: u32 = 131072;
pub const SCE_KERNEL_256KiB: u32 = 262144;
pub const SCE_KERNEL_512KiB: u32 = 524288;
pub const SCE_KERNEL_1MiB: u32 = 1048576;
pub const SCE_KERNEL_2MiB: u32 = 2097152;
pub const SCE_KERNEL_4MiB: u32 = 4194304;
pub const SCE_KERNEL_8MiB: u32 = 8388608;
pub const SCE_KERNEL_16MiB: u32 = 16777216;
pub const SCE_KERNEL_32MiB: u32 = 33554432;
pub const SCE_KERNEL_64MiB: u32 = 67108864;
pub const SCE_KERNEL_128MiB: u32 = 134217728;
pub const SCE_KERNEL_256MiB: u32 = 268435456;
pub const SCE_KERNEL_512MiB: u32 = 536870912;
pub const SCE_KERNEL_1GiB: u32 = 1073741824;
pub const SCE_KERNEL_2GiB: u32 = 2147483648;
pub const SCE_KERNEL_4GiB: u64 = 4294967296;
pub const SCE_KERNEL_8GiB: u64 = 8589934592;
pub const SCE_KERNEL_16GiB: u64 = 17179869184;
pub const SCE_KERNEL_32GiB: u64 = 34359738368;
pub const SCE_GXM_MINIMUM_CONTEXT_HOST_MEM_SIZE: u32 = 2048;
pub const SCE_GXM_DEFAULT_PARAMETER_BUFFER_SIZE: u32 = 16777216;
pub const SCE_GXM_DEFAULT_VDM_RING_BUFFER_SIZE: u32 = 131072;
pub const SCE_GXM_DEFAULT_VERTEX_RING_BUFFER_SIZE: u32 = 2097152;
pub const SCE_GXM_DEFAULT_FRAGMENT_RING_BUFFER_SIZE: u32 = 524288;
pub const SCE_GXM_DEFAULT_FRAGMENT_USSE_RING_BUFFER_SIZE: u32 = 16384;
pub const SCE_GXM_MAX_VERTEX_ATTRIBUTES: u32 = 16;
pub const SCE_GXM_MAX_VERTEX_STREAMS: u32 = 16;
pub const SCE_GXM_MAX_TEXTURE_UNITS: u32 = 16;
pub const SCE_GXM_MAX_UNIFORM_BUFFERS: u32 = 14;
pub const SCE_GXM_MAX_AUXILIARY_SURFACES: u32 = 3;
pub const SCE_GXM_TILE_SHIFTX: u32 = 5;
pub const SCE_GXM_TILE_SHIFTY: u32 = 5;
pub const SCE_GXM_TILE_SIZEX: u32 = 32;
pub const SCE_GXM_TILE_SIZEY: u32 = 32;
pub const SCE_GXM_COLOR_SURFACE_ALIGNMENT: u32 = 4;
pub const SCE_GXM_TEXTURE_ALIGNMENT: u32 = 16;
pub const SCE_GXM_DEPTHSTENCIL_SURFACE_ALIGNMENT: u32 = 16;
pub const SCE_GXM_PALETTE_ALIGNMENT: u32 = 64;
pub const SHARK_DISABLE: u32 = 0;
pub const SHARK_ENABLE: u32 = 1;
pub const GL_FALSE: u32 = 0;
pub const GL_TRUE: u32 = 1;
pub const EGL_FALSE: u32 = 0;
pub const EGL_TRUE: u32 = 1;
pub const GL_NO_ERROR: u32 = 0;
pub const GL_ZERO: u32 = 0;
pub const GL_ONE: u32 = 1;
pub const GL_NONE: u32 = 0;
pub const GL_POINTS: u32 = 0;
pub const GL_LINES: u32 = 1;
pub const GL_LINE_LOOP: u32 = 2;
pub const GL_LINE_STRIP: u32 = 3;
pub const GL_TRIANGLES: u32 = 4;
pub const GL_TRIANGLE_STRIP: u32 = 5;
pub const GL_TRIANGLE_FAN: u32 = 6;
pub const GL_QUADS: u32 = 7;
pub const GL_POLYGON: u32 = 9;
pub const GL_ADD: u32 = 260;
pub const GL_NEVER: u32 = 512;
pub const GL_LESS: u32 = 513;
pub const GL_EQUAL: u32 = 514;
pub const GL_LEQUAL: u32 = 515;
pub const GL_GREATER: u32 = 516;
pub const GL_NOTEQUAL: u32 = 517;
pub const GL_GEQUAL: u32 = 518;
pub const GL_ALWAYS: u32 = 519;
pub const GL_SRC_COLOR: u32 = 768;
pub const GL_ONE_MINUS_SRC_COLOR: u32 = 769;
pub const GL_SRC_ALPHA: u32 = 770;
pub const GL_ONE_MINUS_SRC_ALPHA: u32 = 771;
pub const GL_DST_ALPHA: u32 = 772;
pub const GL_ONE_MINUS_DST_ALPHA: u32 = 773;
pub const GL_DST_COLOR: u32 = 774;
pub const GL_ONE_MINUS_DST_COLOR: u32 = 775;
pub const GL_SRC_ALPHA_SATURATE: u32 = 776;
pub const GL_FRONT: u32 = 1028;
pub const GL_BACK: u32 = 1029;
pub const GL_FRONT_AND_BACK: u32 = 1032;
pub const GL_INVALID_ENUM: u32 = 1280;
pub const GL_INVALID_VALUE: u32 = 1281;
pub const GL_INVALID_OPERATION: u32 = 1282;
pub const GL_STACK_OVERFLOW: u32 = 1283;
pub const GL_STACK_UNDERFLOW: u32 = 1284;
pub const GL_OUT_OF_MEMORY: u32 = 1285;
pub const GL_EXP: u32 = 2048;
pub const GL_EXP2: u32 = 2049;
pub const GL_CW: u32 = 2304;
pub const GL_CCW: u32 = 2305;
pub const GL_CURRENT_COLOR: u32 = 2816;
pub const GL_POLYGON_MODE: u32 = 2880;
pub const GL_CULL_FACE: u32 = 2884;
pub const GL_LIGHTING: u32 = 2896;
pub const GL_LIGHT_MODEL_AMBIENT: u32 = 2899;
pub const GL_COLOR_MATERIAL: u32 = 2903;
pub const GL_FOG: u32 = 2912;
pub const GL_FOG_DENSITY: u32 = 2914;
pub const GL_FOG_START: u32 = 2915;
pub const GL_FOG_END: u32 = 2916;
pub const GL_FOG_MODE: u32 = 2917;
pub const GL_FOG_COLOR: u32 = 2918;
pub const GL_DEPTH_RANGE: u32 = 2928;
pub const GL_DEPTH_TEST: u32 = 2929;
pub const GL_DEPTH_WRITEMASK: u32 = 2930;
pub const GL_STENCIL_TEST: u32 = 2960;
pub const GL_MATRIX_MODE: u32 = 2976;
pub const GL_NORMALIZE: u32 = 2977;
pub const GL_VIEWPORT: u32 = 2978;
pub const GL_MODELVIEW_MATRIX: u32 = 2982;
pub const GL_PROJECTION_MATRIX: u32 = 2983;
pub const GL_TEXTURE_MATRIX: u32 = 2984;
pub const GL_ALPHA_TEST: u32 = 3008;
pub const GL_BLEND_DST: u32 = 3040;
pub const GL_BLEND_SRC: u32 = 3041;
pub const GL_BLEND: u32 = 3042;
pub const GL_SCISSOR_BOX: u32 = 3088;
pub const GL_SCISSOR_TEST: u32 = 3089;
pub const GL_COLOR_CLEAR_VALUE: u32 = 3106;
pub const GL_DOUBLEBUFFER: u32 = 3122;
pub const GL_UNPACK_ROW_LENGTH: u32 = 3314;
pub const GL_UNPACK_ALIGNMENT: u32 = 3317;
pub const GL_PACK_ALIGNMENT: u32 = 3333;
pub const GL_ALPHA_SCALE: u32 = 3356;
pub const GL_MAX_LIGHTS: u32 = 3377;
pub const GL_MAX_CLIP_PLANES: u32 = 3378;
pub const GL_MAX_TEXTURE_SIZE: u32 = 3379;
pub const GL_MAX_MODELVIEW_STACK_DEPTH: u32 = 3382;
pub const GL_MAX_PROJECTION_STACK_DEPTH: u32 = 3384;
pub const GL_MAX_TEXTURE_STACK_DEPTH: u32 = 3385;
pub const GL_MAX_VIEWPORT_DIMS: u32 = 3386;
pub const GL_RED_BITS: u32 = 3410;
pub const GL_GREEN_BITS: u32 = 3411;
pub const GL_BLUE_BITS: u32 = 3412;
pub const GL_ALPHA_BITS: u32 = 3413;
pub const GL_DEPTH_BITS: u32 = 3414;
pub const GL_STENCIL_BITS: u32 = 3415;
pub const GL_TEXTURE_1D: u32 = 3552;
pub const GL_TEXTURE_2D: u32 = 3553;
pub const GL_DONT_CARE: u32 = 4352;
pub const GL_FASTEST: u32 = 4353;
pub const GL_NICEST: u32 = 4354;
pub const GL_AMBIENT: u32 = 4608;
pub const GL_DIFFUSE: u32 = 4609;
pub const GL_SPECULAR: u32 = 4610;
pub const GL_POSITION: u32 = 4611;
pub const GL_CONSTANT_ATTENUATION: u32 = 4615;
pub const GL_LINEAR_ATTENUATION: u32 = 4616;
pub const GL_QUADRATIC_ATTENUATION: u32 = 4617;
pub const GL_COMPILE: u32 = 4864;
pub const GL_COMPILE_AND_EXECUTE: u32 = 4865;
pub const GL_BYTE: u32 = 5120;
pub const GL_UNSIGNED_BYTE: u32 = 5121;
pub const GL_SHORT: u32 = 5122;
pub const GL_UNSIGNED_SHORT: u32 = 5123;
pub const GL_INT: u32 = 5124;
pub const GL_UNSIGNED_INT: u32 = 5125;
pub const GL_FLOAT: u32 = 5126;
pub const GL_HALF_FLOAT: u32 = 5131;
pub const GL_FIXED: u32 = 5132;
pub const GL_INVERT: u32 = 5386;
pub const GL_EMISSION: u32 = 5632;
pub const GL_SHININESS: u32 = 5633;
pub const GL_AMBIENT_AND_DIFFUSE: u32 = 5634;
pub const GL_MODELVIEW: u32 = 5888;
pub const GL_PROJECTION: u32 = 5889;
pub const GL_TEXTURE: u32 = 5890;
pub const GL_COLOR_INDEX: u32 = 6400;
pub const GL_DEPTH_COMPONENT: u32 = 6402;
pub const GL_RED: u32 = 6403;
pub const GL_GREEN: u32 = 6404;
pub const GL_BLUE: u32 = 6405;
pub const GL_ALPHA: u32 = 6406;
pub const GL_RGB: u32 = 6407;
pub const GL_RGBA: u32 = 6408;
pub const GL_LUMINANCE: u32 = 6409;
pub const GL_LUMINANCE_ALPHA: u32 = 6410;
pub const GL_POINT: u32 = 6912;
pub const GL_LINE: u32 = 6913;
pub const GL_FILL: u32 = 6914;
pub const GL_FLAT: u32 = 7424;
pub const GL_SMOOTH: u32 = 7425;
pub const GL_KEEP: u32 = 7680;
pub const GL_REPLACE: u32 = 7681;
pub const GL_INCR: u32 = 7682;
pub const GL_DECR: u32 = 7683;
pub const GL_VENDOR: u32 = 7936;
pub const GL_RENDERER: u32 = 7937;
pub const GL_VERSION: u32 = 7938;
pub const GL_EXTENSIONS: u32 = 7939;
pub const GL_MODULATE: u32 = 8448;
pub const GL_DECAL: u32 = 8449;
pub const GL_TEXTURE_ENV_MODE: u32 = 8704;
pub const GL_TEXTURE_ENV_COLOR: u32 = 8705;
pub const GL_TEXTURE_ENV: u32 = 8960;
pub const GL_NEAREST: u32 = 9728;
pub const GL_LINEAR: u32 = 9729;
pub const GL_NEAREST_MIPMAP_NEAREST: u32 = 9984;
pub const GL_LINEAR_MIPMAP_NEAREST: u32 = 9985;
pub const GL_NEAREST_MIPMAP_LINEAR: u32 = 9986;
pub const GL_LINEAR_MIPMAP_LINEAR: u32 = 9987;
pub const GL_TEXTURE_MAG_FILTER: u32 = 10240;
pub const GL_TEXTURE_MIN_FILTER: u32 = 10241;
pub const GL_TEXTURE_WRAP_S: u32 = 10242;
pub const GL_TEXTURE_WRAP_T: u32 = 10243;
pub const GL_CLAMP: u32 = 10496;
pub const GL_REPEAT: u32 = 10497;
pub const GL_POLYGON_OFFSET_UNITS: u32 = 10752;
pub const GL_POLYGON_OFFSET_POINT: u32 = 10753;
pub const GL_POLYGON_OFFSET_LINE: u32 = 10754;
pub const GL_V2F: u32 = 10784;
pub const GL_V3F: u32 = 10785;
pub const GL_C4UB_V2F: u32 = 10786;
pub const GL_C4UB_V3F: u32 = 10787;
pub const GL_C3F_V3F: u32 = 10788;
pub const GL_T2F_V3F: u32 = 10791;
pub const GL_T4F_V4F: u32 = 10792;
pub const GL_T2F_C4UB_V3F: u32 = 10793;
pub const GL_T2F_C3F_V3F: u32 = 10794;
pub const GL_CLIP_PLANE0: u32 = 12288;
pub const GL_CLIP_PLANE1: u32 = 12289;
pub const GL_CLIP_PLANE2: u32 = 12290;
pub const GL_CLIP_PLANE3: u32 = 12291;
pub const GL_CLIP_PLANE4: u32 = 12292;
pub const GL_CLIP_PLANE5: u32 = 12293;
pub const GL_CLIP_PLANE6: u32 = 12294;
pub const GL_LIGHT0: u32 = 16384;
pub const GL_LIGHT1: u32 = 16385;
pub const GL_LIGHT2: u32 = 16386;
pub const GL_LIGHT3: u32 = 16387;
pub const GL_LIGHT4: u32 = 16388;
pub const GL_LIGHT5: u32 = 16389;
pub const GL_LIGHT6: u32 = 16390;
pub const GL_LIGHT7: u32 = 16391;
pub const GL_ABGR_EXT: u32 = 32768;
pub const GL_FUNC_ADD: u32 = 32774;
pub const GL_MIN: u32 = 32775;
pub const GL_MAX: u32 = 32776;
pub const GL_BLEND_EQUATION: u32 = 32777;
pub const GL_FUNC_SUBTRACT: u32 = 32778;
pub const GL_FUNC_REVERSE_SUBTRACT: u32 = 32779;
pub const GL_UNSIGNED_SHORT_4_4_4_4: u32 = 32819;
pub const GL_UNSIGNED_SHORT_5_5_5_1: u32 = 32820;
pub const GL_UNSIGNED_INT_8_8_8_8: u32 = 32821;
pub const GL_POLYGON_OFFSET_FILL: u32 = 32823;
pub const GL_POLYGON_OFFSET_FACTOR: u32 = 32824;
pub const GL_INTENSITY: u32 = 32841;
pub const GL_RGB8: u32 = 32849;
pub const GL_RGBA8: u32 = 32856;
pub const GL_TEXTURE_BINDING_2D: u32 = 32873;
pub const GL_VERTEX_ARRAY: u32 = 32884;
pub const GL_NORMAL_ARRAY: u32 = 32885;
pub const GL_COLOR_ARRAY: u32 = 32886;
pub const GL_TEXTURE_COORD_ARRAY: u32 = 32888;
pub const GL_VERTEX_ARRAY_SIZE: u32 = 32890;
pub const GL_VERTEX_ARRAY_TYPE: u32 = 32891;
pub const GL_VERTEX_ARRAY_STRIDE: u32 = 32892;
pub const GL_NORMAL_ARRAY_TYPE: u32 = 32894;
pub const GL_NORMAL_ARRAY_STRIDE: u32 = 32895;
pub const GL_COLOR_ARRAY_SIZE: u32 = 32897;
pub const GL_COLOR_ARRAY_TYPE: u32 = 32898;
pub const GL_COLOR_ARRAY_STRIDE: u32 = 32899;
pub const GL_TEXTURE_COORD_ARRAY_SIZE: u32 = 32904;
pub const GL_TEXTURE_COORD_ARRAY_TYPE: u32 = 32905;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE: u32 = 32906;
pub const GL_VERTEX_ARRAY_POINTER: u32 = 32910;
pub const GL_NORMAL_ARRAY_POINTER: u32 = 32911;
pub const GL_COLOR_ARRAY_POINTER: u32 = 32912;
pub const GL_TEXTURE_COORD_ARRAY_POINTER: u32 = 32914;
pub const GL_BLEND_DST_RGB: u32 = 32968;
pub const GL_BLEND_SRC_RGB: u32 = 32969;
pub const GL_BLEND_DST_ALPHA: u32 = 32970;
pub const GL_BLEND_SRC_ALPHA: u32 = 32971;
pub const GL_COLOR_TABLE: u32 = 32976;
pub const GL_BGR: u32 = 32992;
pub const GL_BGRA: u32 = 32993;
pub const GL_COLOR_INDEX8_EXT: u32 = 32997;
pub const GL_MAX_ELEMENTS_VERTICES: u32 = 33000;
pub const GL_MAX_ELEMENTS_INDICES: u32 = 33001;
pub const GL_PHONG_WIN: u32 = 33002;
pub const GL_CLAMP_TO_EDGE: u32 = 33071;
pub const GL_DEPTH_COMPONENT16: u32 = 33189;
pub const GL_DEPTH_COMPONENT24: u32 = 33190;
pub const GL_DEPTH_COMPONENT32: u32 = 33191;
pub const GL_DEPTH_STENCIL_ATTACHMENT: u32 = 33306;
pub const GL_MAJOR_VERSION: u32 = 33307;
pub const GL_MINOR_VERSION: u32 = 33308;
pub const GL_NUM_EXTENSIONS: u32 = 33309;
pub const GL_RG: u32 = 33319;
pub const GL_UNSIGNED_SHORT_5_6_5: u32 = 33635;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV: u32 = 33638;
pub const GL_UNSIGNED_INT_8_8_8_8_REV: u32 = 33639;
pub const GL_MIRRORED_REPEAT: u32 = 33648;
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT: u32 = 33776;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT: u32 = 33777;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT: u32 = 33778;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT: u32 = 33779;
pub const GL_TEXTURE0: u32 = 33984;
pub const GL_TEXTURE1: u32 = 33985;
pub const GL_TEXTURE2: u32 = 33986;
pub const GL_TEXTURE3: u32 = 33987;
pub const GL_TEXTURE4: u32 = 33988;
pub const GL_TEXTURE5: u32 = 33989;
pub const GL_TEXTURE6: u32 = 33990;
pub const GL_TEXTURE7: u32 = 33991;
pub const GL_TEXTURE8: u32 = 33992;
pub const GL_TEXTURE9: u32 = 33993;
pub const GL_TEXTURE10: u32 = 33994;
pub const GL_TEXTURE11: u32 = 33995;
pub const GL_TEXTURE12: u32 = 33996;
pub const GL_TEXTURE13: u32 = 33997;
pub const GL_TEXTURE14: u32 = 33998;
pub const GL_TEXTURE15: u32 = 33999;
pub const GL_ACTIVE_TEXTURE: u32 = 34016;
pub const GL_CLIENT_ACTIVE_TEXTURE: u32 = 34017;
pub const GL_MAX_TEXTURE_UNITS: u32 = 34018;
pub const GL_SUBTRACT: u32 = 34023;
pub const GL_MAX_RENDERBUFFER_SIZE: u32 = 34024;
pub const GL_TEXTURE_COMPRESSION_HINT: u32 = 34031;
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34046;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT: u32 = 34047;
pub const GL_TEXTURE_LOD_BIAS: u32 = 34049;
pub const GL_INCR_WRAP: u32 = 34055;
pub const GL_DECR_WRAP: u32 = 34056;
pub const GL_TEXTURE_CUBE_MAP: u32 = 34067;
pub const GL_TEXTURE_BINDING_CUBE_MAP: u32 = 34068;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X: u32 = 34069;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X: u32 = 34070;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y: u32 = 34071;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y: u32 = 34072;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z: u32 = 34073;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z: u32 = 34074;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE: u32 = 34076;
pub const GL_COMBINE: u32 = 34160;
pub const GL_COMBINE_RGB: u32 = 34161;
pub const GL_COMBINE_ALPHA: u32 = 34162;
pub const GL_RGB_SCALE: u32 = 34163;
pub const GL_ADD_SIGNED: u32 = 34164;
pub const GL_INTERPOLATE: u32 = 34165;
pub const GL_CONSTANT: u32 = 34166;
pub const GL_PRIMARY_COLOR: u32 = 34167;
pub const GL_PREVIOUS: u32 = 34168;
pub const GL_SRC0_RGB: u32 = 34176;
pub const GL_SRC1_RGB: u32 = 34177;
pub const GL_SRC2_RGB: u32 = 34178;
pub const GL_SRC0_ALPHA: u32 = 34184;
pub const GL_SRC1_ALPHA: u32 = 34185;
pub const GL_SRC2_ALPHA: u32 = 34186;
pub const GL_OPERAND0_RGB: u32 = 34192;
pub const GL_OPERAND1_RGB: u32 = 34193;
pub const GL_OPERAND2_RGB: u32 = 34194;
pub const GL_OPERAND0_ALPHA: u32 = 34200;
pub const GL_OPERAND1_ALPHA: u32 = 34201;
pub const GL_OPERAND2_ALPHA: u32 = 34202;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED: u32 = 34338;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE: u32 = 34339;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE: u32 = 34340;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE: u32 = 34341;
pub const GL_CURRENT_VERTEX_ATTRIB: u32 = 34342;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER: u32 = 34373;
pub const GL_PROGRAM_ERROR_POSITION_ARB: u32 = 34379;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS: u32 = 34466;
pub const GL_COMPRESSED_TEXTURE_FORMATS: u32 = 34467;
pub const GL_PROGRAM_BINARY_LENGTH: u32 = 34625;
pub const GL_MIRROR_CLAMP_EXT: u32 = 34626;
pub const GL_BUFFER_SIZE: u32 = 34660;
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD: u32 = 34798;
pub const GL_RGBA16F: u32 = 34842;
pub const GL_BLEND_EQUATION_ALPHA: u32 = 34877;
pub const GL_POINT_SPRITE: u32 = 34913;
pub const GL_MAX_VERTEX_ATTRIBS: u32 = 34921;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: u32 = 34922;
pub const GL_MAX_TEXTURE_COORDS: u32 = 34929;
pub const GL_MAX_TEXTURE_IMAGE_UNITS: u32 = 34930;
pub const GL_ARRAY_BUFFER: u32 = 34962;
pub const GL_ELEMENT_ARRAY_BUFFER: u32 = 34963;
pub const GL_ARRAY_BUFFER_BINDING: u32 = 34964;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING: u32 = 34965;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: u32 = 34975;
pub const GL_READ_ONLY: u32 = 35000;
pub const GL_WRITE_ONLY: u32 = 35001;
pub const GL_READ_WRITE: u32 = 35002;
pub const GL_STREAM_DRAW: u32 = 35040;
pub const GL_STREAM_READ: u32 = 35041;
pub const GL_STREAM_COPY: u32 = 35042;
pub const GL_STATIC_DRAW: u32 = 35044;
pub const GL_STATIC_READ: u32 = 35045;
pub const GL_STATIC_COPY: u32 = 35046;
pub const GL_DYNAMIC_DRAW: u32 = 35048;
pub const GL_DYNAMIC_READ: u32 = 35049;
pub const GL_DYNAMIC_COPY: u32 = 35050;
pub const GL_DEPTH24_STENCIL8: u32 = 35056;
pub const GL_SAMPLER_BINDING: u32 = 35097;
pub const GL_FRAGMENT_SHADER: u32 = 35632;
pub const GL_VERTEX_SHADER: u32 = 35633;
pub const GL_MAX_VARYING_FLOATS: u32 = 35659;
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS: u32 = 35657;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS: u32 = 35658;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS: u32 = 35660;
pub const GL_SHADER_TYPE: u32 = 35663;
pub const GL_FLOAT_VEC2: u32 = 35664;
pub const GL_FLOAT_VEC3: u32 = 35665;
pub const GL_FLOAT_VEC4: u32 = 35666;
pub const GL_INT_VEC2: u32 = 35667;
pub const GL_INT_VEC3: u32 = 35668;
pub const GL_INT_VEC4: u32 = 35669;
pub const GL_FLOAT_MAT2: u32 = 35674;
pub const GL_FLOAT_MAT3: u32 = 35675;
pub const GL_FLOAT_MAT4: u32 = 35676;
pub const GL_SAMPLER_2D: u32 = 35678;
pub const GL_SAMPLER_CUBE: u32 = 35680;
pub const GL_DELETE_STATUS: u32 = 35712;
pub const GL_COMPILE_STATUS: u32 = 35713;
pub const GL_LINK_STATUS: u32 = 35714;
pub const GL_VALIDATE_STATUS: u32 = 35715;
pub const GL_INFO_LOG_LENGTH: u32 = 35716;
pub const GL_ATTACHED_SHADERS: u32 = 35717;
pub const GL_ACTIVE_UNIFORMS: u32 = 35718;
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH: u32 = 35719;
pub const GL_SHADER_SOURCE_LENGTH: u32 = 35720;
pub const GL_ACTIVE_ATTRIBUTES: u32 = 35721;
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH: u32 = 35722;
pub const GL_SHADING_LANGUAGE_VERSION: u32 = 35724;
pub const GL_CURRENT_PROGRAM: u32 = 35725;
pub const GL_PALETTE4_RGB8_OES: u32 = 35728;
pub const GL_PALETTE4_RGBA8_OES: u32 = 35729;
pub const GL_PALETTE4_R5_G6_B5_OES: u32 = 35730;
pub const GL_PALETTE4_RGBA4_OES: u32 = 35731;
pub const GL_PALETTE4_RGB5_A1_OES: u32 = 35732;
pub const GL_PALETTE8_RGB8_OES: u32 = 35733;
pub const GL_PALETTE8_RGBA8_OES: u32 = 35734;
pub const GL_PALETTE8_R5_G6_B5_OES: u32 = 35735;
pub const GL_PALETTE8_RGBA4_OES: u32 = 35736;
pub const GL_PALETTE8_RGB5_A1_OES: u32 = 35737;
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG: u32 = 35840;
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG: u32 = 35841;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: u32 = 35842;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: u32 = 35843;
pub const GL_SRGB: u32 = 35904;
pub const GL_SRGB8: u32 = 35905;
pub const GL_SRGB_ALPHA: u32 = 35906;
pub const GL_SRGB8_ALPHA8: u32 = 35907;
pub const GL_SLUMINANCE_ALPHA: u32 = 35908;
pub const GL_SLUMINANCE8_ALPHA8: u32 = 35909;
pub const GL_SLUMINANCE: u32 = 35910;
pub const GL_SLUMINANCE8: u32 = 35911;
pub const GL_COMPRESSED_SRGB: u32 = 35912;
pub const GL_COMPRESSED_SRGB_ALPHA: u32 = 35913;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1: u32 = 35916;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1: u32 = 35917;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3: u32 = 35918;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5: u32 = 35919;
pub const GL_ATC_RGB_AMD: u32 = 35986;
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD: u32 = 35987;
pub const GL_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_RENDERBUFFER_BINDING: u32 = 36007;
pub const GL_READ_FRAMEBUFFER: u32 = 36008;
pub const GL_DRAW_FRAMEBUFFER: u32 = 36009;
pub const GL_READ_FRAMEBUFFER_BINDING: u32 = 36010;
pub const GL_COLOR_ATTACHMENT0: u32 = 36064;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: u32 = 36048;
pub const GL_MAX_COLOR_ATTACHMENTS: u32 = 36063;
pub const GL_DEPTH_ATTACHMENT: u32 = 36096;
pub const GL_STENCIL_ATTACHMENT: u32 = 36128;
pub const GL_DEPTH_COMPONENT32F: u32 = 36267;
pub const GL_DEPTH32F_STENCIL8: u32 = 36268;
pub const GL_FRAMEBUFFER_COMPLETE: u32 = 36053;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: u32 = 36055;
pub const GL_FRAMEBUFFER: u32 = 36160;
pub const GL_RENDERBUFFER: u32 = 36161;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS: u32 = 35661;
pub const GL_HALF_FLOAT_OES: u32 = 36193;
pub const GL_ETC1_RGB8_OES: u32 = 36196;
pub const GL_SHADER_BINARY_FORMATS: u32 = 36344;
pub const GL_NUM_SHADER_BINARY_FORMATS: u32 = 36345;
pub const GL_SHADER_COMPILER: u32 = 36346;
pub const GL_MAX_VERTEX_UNIFORM_VECTORS: u32 = 36347;
pub const GL_MAX_VARYING_VECTORS: u32 = 36348;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS: u32 = 36349;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX: u32 = 36935;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX: u32 = 36936;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX: u32 = 36937;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG: u32 = 37175;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG: u32 = 37176;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC: u32 = 37496;
pub const EGL_SUCCESS: u32 = 12288;
pub const EGL_BAD_PARAMETER: u32 = 12300;
pub const EGL_OPENGL_ES_API: u32 = 12448;
pub const EGL_OPENGL_API: u32 = 12450;
pub const GL_MAX_TEXTURE_LOD_BIAS: u32 = 31;
pub const GL_POINT_BIT: u32 = 2;
pub const GL_LINE_BIT: u32 = 4;
pub const GL_POLYGON_BIT: u32 = 8;
pub const GL_LIGHTING_BIT: u32 = 64;
pub const GL_FOG_BIT: u32 = 128;
pub const GL_DEPTH_BUFFER_BIT: u32 = 256;
pub const GL_STENCIL_BUFFER_BIT: u32 = 1024;
pub const GL_VIEWPORT_BIT: u32 = 2048;
pub const GL_TRANSFORM_BIT: u32 = 4096;
pub const GL_ENABLE_BIT: u32 = 8192;
pub const GL_COLOR_BUFFER_BIT: u32 = 16384;
pub const GL_HINT_BIT: u32 = 32768;
pub const GL_SCISSOR_BIT: u32 = 524288;
pub const GL_ALL_ATTRIB_BITS: u32 = 4294967295;
pub const GL_MAP_READ_BIT: u32 = 1;
pub const GL_MAP_WRITE_BIT: u32 = 2;
pub const GL_MAP_INVALIDATE_RANGE_BIT: u32 = 4;
pub const GL_MAP_INVALIDATE_BUFFER_BIT: u32 = 8;
pub const GL_MAP_FLUSH_EXPLICIT_BIT: u32 = 16;
pub const GL_MAP_UNSYNCHRONIZED_BIT: u32 = 32;
pub const GL_DRAW_FRAMEBUFFER_BINDING: u32 = 36006;
pub const GL_BLEND_EQUATION_RGB: u32 = 32777;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = ::std::os::raw::c_schar;
pub type __uint_least8_t = ::std::os::raw::c_uchar;
pub type __int_least16_t = ::std::os::raw::c_short;
pub type __uint_least16_t = ::std::os::raw::c_ushort;
pub type __int_least32_t = ::std::os::raw::c_int;
pub type __uint_least32_t = ::std::os::raw::c_uint;
pub type __int_least64_t = ::std::os::raw::c_long;
pub type __uint_least64_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __uintptr_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type int_fast16_t = ::std::os::raw::c_short;
pub type uint_fast16_t = ::std::os::raw::c_ushort;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type SceChar8 = i8;
pub type SceUChar8 = u8;
pub type SceInt8 = i8;
pub type SceUInt8 = u8;
pub type SceShort16 = i16;
pub type SceUShort16 = u16;
pub type SceInt16 = i16;
pub type SceUInt16 = u16;
pub type SceInt32 = i32;
pub type SceUInt32 = u32;
pub type SceInt = i32;
pub type SceUInt = u32;
pub type SceInt64 = i64;
pub type SceUInt64 = u64;
pub type SceLong64 = i64;
pub type SceULong64 = u64;
pub type SceSize = ::std::os::raw::c_uint;
pub type SceSSize = ::std::os::raw::c_int;
pub type SceBool = ::std::os::raw::c_int;
pub const SCE_FALSE: _bindgen_ty_1 = 0;
pub const SCE_TRUE: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type SceFloat = f32;
pub type SceFloat32 = f32;
pub type SceDouble = f64;
pub type SceDouble64 = f64;
pub type SceSByte = ::std::os::raw::c_schar;
pub type SceSByte8 = ::std::os::raw::c_schar;
pub type SceByte = ::std::os::raw::c_uchar;
pub type SceByte8 = ::std::os::raw::c_uchar;
pub type SceWChar16 = u16;
pub type SceWChar32 = u32;
pub type SceVoid = ::std::os::raw::c_void;
pub type ScePVoid = *mut ::std::os::raw::c_void;
pub type SceIntPtr = ::std::os::raw::c_int;
pub type SceUIntPtr = ::std::os::raw::c_uint;
pub type SceUIntVAddr = SceUIntPtr;
pub type SceMode = ::std::os::raw::c_int;
pub type SceOff = SceInt64;
pub type SceUID = ::std::os::raw::c_int;
pub type ScePID = ::std::os::raw::c_int;
pub type SceNID = ::std::os::raw::c_uint;
pub type SceName = *mut ::std::os::raw::c_char;
#[doc = " 64-bit system clock type."]
pub type SceKernelSysClock = SceUInt64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIVector2 {
    pub x: SceInt,
    pub y: SceInt,
}
#[test]
fn bindgen_test_layout_SceIVector2() {
    const UNINIT: ::std::mem::MaybeUninit<SceIVector2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceIVector2>(),
        8usize,
        concat!("Size of: ", stringify!(SceIVector2))
    );
    assert_eq!(
        ::std::mem::align_of::<SceIVector2>(),
        4usize,
        concat!("Alignment of ", stringify!(SceIVector2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector2),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFVector2 {
    pub x: SceFloat,
    pub y: SceFloat,
}
#[test]
fn bindgen_test_layout_SceFVector2() {
    const UNINIT: ::std::mem::MaybeUninit<SceFVector2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFVector2>(),
        8usize,
        concat!("Size of: ", stringify!(SceFVector2))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFVector2>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFVector2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector2),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIVector3 {
    pub x: SceInt,
    pub y: SceInt,
    pub z: SceInt,
}
#[test]
fn bindgen_test_layout_SceIVector3() {
    const UNINIT: ::std::mem::MaybeUninit<SceIVector3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceIVector3>(),
        12usize,
        concat!("Size of: ", stringify!(SceIVector3))
    );
    assert_eq!(
        ::std::mem::align_of::<SceIVector3>(),
        4usize,
        concat!("Alignment of ", stringify!(SceIVector3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFVector3 {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
}
#[test]
fn bindgen_test_layout_SceFVector3() {
    const UNINIT: ::std::mem::MaybeUninit<SceFVector3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFVector3>(),
        12usize,
        concat!("Size of: ", stringify!(SceFVector3))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFVector3>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFVector3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIVector4 {
    pub x: SceInt,
    pub y: SceInt,
    pub z: SceInt,
    pub w: SceInt,
}
#[test]
fn bindgen_test_layout_SceIVector4() {
    const UNINIT: ::std::mem::MaybeUninit<SceIVector4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceIVector4>(),
        16usize,
        concat!("Size of: ", stringify!(SceIVector4))
    );
    assert_eq!(
        ::std::mem::align_of::<SceIVector4>(),
        4usize,
        concat!("Alignment of ", stringify!(SceIVector4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIVector4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFVector4 {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
    pub w: SceFloat,
}
#[test]
fn bindgen_test_layout_SceFVector4() {
    const UNINIT: ::std::mem::MaybeUninit<SceFVector4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFVector4>(),
        16usize,
        concat!("Size of: ", stringify!(SceFVector4))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFVector4>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFVector4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFVector4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIMatrix2 {
    pub x: SceIVector2,
    pub y: SceIVector2,
}
#[test]
fn bindgen_test_layout_SceIMatrix2() {
    const UNINIT: ::std::mem::MaybeUninit<SceIMatrix2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceIMatrix2>(),
        16usize,
        concat!("Size of: ", stringify!(SceIMatrix2))
    );
    assert_eq!(
        ::std::mem::align_of::<SceIMatrix2>(),
        4usize,
        concat!("Alignment of ", stringify!(SceIMatrix2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix2),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFMatrix2 {
    pub x: SceFVector2,
    pub y: SceFVector2,
}
#[test]
fn bindgen_test_layout_SceFMatrix2() {
    const UNINIT: ::std::mem::MaybeUninit<SceFMatrix2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFMatrix2>(),
        16usize,
        concat!("Size of: ", stringify!(SceFMatrix2))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFMatrix2>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFMatrix2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix2),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIMatrix3 {
    pub x: SceIVector3,
    pub y: SceIVector3,
    pub z: SceIVector3,
}
#[test]
fn bindgen_test_layout_SceIMatrix3() {
    const UNINIT: ::std::mem::MaybeUninit<SceIMatrix3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceIMatrix3>(),
        36usize,
        concat!("Size of: ", stringify!(SceIMatrix3))
    );
    assert_eq!(
        ::std::mem::align_of::<SceIMatrix3>(),
        4usize,
        concat!("Alignment of ", stringify!(SceIMatrix3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFMatrix3 {
    pub x: SceFVector3,
    pub y: SceFVector3,
    pub z: SceFVector3,
}
#[test]
fn bindgen_test_layout_SceFMatrix3() {
    const UNINIT: ::std::mem::MaybeUninit<SceFMatrix3> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFMatrix3>(),
        36usize,
        concat!("Size of: ", stringify!(SceFMatrix3))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFMatrix3>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFMatrix3))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix3),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix3),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix3),
            "::",
            stringify!(z)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceIMatrix4 {
    pub x: SceIVector4,
    pub y: SceIVector4,
    pub z: SceIVector4,
    pub w: SceIVector4,
}
#[test]
fn bindgen_test_layout_SceIMatrix4() {
    const UNINIT: ::std::mem::MaybeUninit<SceIMatrix4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceIMatrix4>(),
        64usize,
        concat!("Size of: ", stringify!(SceIMatrix4))
    );
    assert_eq!(
        ::std::mem::align_of::<SceIMatrix4>(),
        4usize,
        concat!("Alignment of ", stringify!(SceIMatrix4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SceIMatrix4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFMatrix4 {
    pub x: SceFVector4,
    pub y: SceFVector4,
    pub z: SceFVector4,
    pub w: SceFVector4,
}
#[test]
fn bindgen_test_layout_SceFMatrix4() {
    const UNINIT: ::std::mem::MaybeUninit<SceFMatrix4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFMatrix4>(),
        64usize,
        concat!("Size of: ", stringify!(SceFMatrix4))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFMatrix4>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFMatrix4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix4),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix4),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix4),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFMatrix4),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFQuaternion {
    pub x: SceFloat,
    pub y: SceFloat,
    pub z: SceFloat,
    pub w: SceFloat,
}
#[test]
fn bindgen_test_layout_SceFQuaternion() {
    const UNINIT: ::std::mem::MaybeUninit<SceFQuaternion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFQuaternion>(),
        16usize,
        concat!("Size of: ", stringify!(SceFQuaternion))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFQuaternion>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFQuaternion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFQuaternion),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFQuaternion),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).z) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFQuaternion),
            "::",
            stringify!(z)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).w) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFQuaternion),
            "::",
            stringify!(w)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFColor {
    pub r: SceFloat,
    pub g: SceFloat,
    pub b: SceFloat,
    pub a: SceFloat,
}
#[test]
fn bindgen_test_layout_SceFColor() {
    const UNINIT: ::std::mem::MaybeUninit<SceFColor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFColor>(),
        16usize,
        concat!("Size of: ", stringify!(SceFColor))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFColor>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFColor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFColor),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFColor),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFColor),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFColor),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceFPlane {
    pub a: SceFloat,
    pub b: SceFloat,
    pub c: SceFloat,
    pub d: SceFloat,
}
#[test]
fn bindgen_test_layout_SceFPlane() {
    const UNINIT: ::std::mem::MaybeUninit<SceFPlane> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceFPlane>(),
        16usize,
        concat!("Size of: ", stringify!(SceFPlane))
    );
    assert_eq!(
        ::std::mem::align_of::<SceFPlane>(),
        4usize,
        concat!("Alignment of ", stringify!(SceFPlane))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFPlane),
            "::",
            stringify!(a)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFPlane),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFPlane),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceFPlane),
            "::",
            stringify!(d)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceDateTime {
    pub year: ::std::os::raw::c_ushort,
    pub month: ::std::os::raw::c_ushort,
    pub day: ::std::os::raw::c_ushort,
    pub hour: ::std::os::raw::c_ushort,
    pub minute: ::std::os::raw::c_ushort,
    pub second: ::std::os::raw::c_ushort,
    pub microsecond: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_SceDateTime() {
    const UNINIT: ::std::mem::MaybeUninit<SceDateTime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceDateTime>(),
        16usize,
        concat!("Size of: ", stringify!(SceDateTime))
    );
    assert_eq!(
        ::std::mem::align_of::<SceDateTime>(),
        4usize,
        concat!("Alignment of ", stringify!(SceDateTime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).year) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(year)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).month) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(month)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).day) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(day)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hour) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(hour)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).minute) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(minute)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).second) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(second)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).microsecond) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceDateTime),
            "::",
            stringify!(microsecond)
        )
    );
}
pub type SceShaccCgParameter = *const ::std::os::raw::c_void;
pub type SceShaccCgCallbackOpenFile = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        includedFrom: *const SceShaccCgSourceLocation,
        compileOptions: *const SceShaccCgCompileOptions,
        errorString: *mut *const ::std::os::raw::c_char,
    ) -> *mut SceShaccCgSourceFile,
>;
pub type SceShaccCgCallbackReleaseFile = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const SceShaccCgSourceFile,
        compileOptions: *const SceShaccCgCompileOptions,
    ),
>;
pub type SceShaccCgCallbackLocateFile = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        includedFrom: *const SceShaccCgSourceLocation,
        searchPathCount: SceUInt32,
        searchPaths: *const *const ::std::os::raw::c_char,
        compileOptions: *const SceShaccCgCompileOptions,
        errorString: *mut *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char,
>;
pub type SceShaccCgCallbackAbsolutePath = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        includedFrom: *const SceShaccCgSourceLocation,
        compileOptions: *const SceShaccCgCompileOptions,
    ) -> *const ::std::os::raw::c_char,
>;
pub type SceShaccCgCallbackReleaseFileName = ::std::option::Option<
    unsafe extern "C" fn(
        fileName: *const ::std::os::raw::c_char,
        compileOptions: *const SceShaccCgCompileOptions,
    ),
>;
pub type SceShaccCgCallbackFileDate = ::std::option::Option<
    unsafe extern "C" fn(
        file: *const SceShaccCgSourceFile,
        includedFrom: *const SceShaccCgSourceLocation,
        compileOptions: *const SceShaccCgCompileOptions,
        timeLastStatusChange: *mut i64,
        timeLastModified: *mut i64,
    ) -> SceInt32,
>;
pub const SceShaccCgDiagnosticLevel_SCE_SHACCCG_DIAGNOSTIC_LEVEL_INFO: SceShaccCgDiagnosticLevel =
    0;
pub const SceShaccCgDiagnosticLevel_SCE_SHACCCG_DIAGNOSTIC_LEVEL_WARNING:
    SceShaccCgDiagnosticLevel = 1;
pub const SceShaccCgDiagnosticLevel_SCE_SHACCCG_DIAGNOSTIC_LEVEL_ERROR: SceShaccCgDiagnosticLevel =
    2;
pub type SceShaccCgDiagnosticLevel = ::std::os::raw::c_uint;
pub const SceShaccCgTargetProfile_SCE_SHACCCG_PROFILE_VP: SceShaccCgTargetProfile = 0;
pub const SceShaccCgTargetProfile_SCE_SHACCCG_PROFILE_FP: SceShaccCgTargetProfile = 1;
pub type SceShaccCgTargetProfile = ::std::os::raw::c_uint;
pub const SceShaccCgCallbackDefaults_SCE_SHACCCG_SYSTEM_FILES: SceShaccCgCallbackDefaults = 0;
pub const SceShaccCgCallbackDefaults_SCE_SHACCCG_TRIVIAL: SceShaccCgCallbackDefaults = 1;
pub type SceShaccCgCallbackDefaults = ::std::os::raw::c_uint;
pub const SceShaccCgLocale_SCE_SHACCCG_ENGLISH: SceShaccCgLocale = 0;
pub const SceShaccCgLocale_SCE_SHACCCG_JAPANESE: SceShaccCgLocale = 1;
pub type SceShaccCgLocale = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceShaccCgSourceFile {
    pub fileName: *const ::std::os::raw::c_char,
    pub text: *const ::std::os::raw::c_char,
    pub size: SceUInt32,
}
#[test]
fn bindgen_test_layout_SceShaccCgSourceFile() {
    const UNINIT: ::std::mem::MaybeUninit<SceShaccCgSourceFile> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceShaccCgSourceFile>(),
        24usize,
        concat!("Size of: ", stringify!(SceShaccCgSourceFile))
    );
    assert_eq!(
        ::std::mem::align_of::<SceShaccCgSourceFile>(),
        8usize,
        concat!("Alignment of ", stringify!(SceShaccCgSourceFile))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileName) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgSourceFile),
            "::",
            stringify!(fileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgSourceFile),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgSourceFile),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceShaccCgSourceLocation {
    pub file: *const SceShaccCgSourceFile,
    pub lineNumber: SceUInt32,
    pub columnNumber: SceUInt32,
}
#[test]
fn bindgen_test_layout_SceShaccCgSourceLocation() {
    const UNINIT: ::std::mem::MaybeUninit<SceShaccCgSourceLocation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceShaccCgSourceLocation>(),
        16usize,
        concat!("Size of: ", stringify!(SceShaccCgSourceLocation))
    );
    assert_eq!(
        ::std::mem::align_of::<SceShaccCgSourceLocation>(),
        8usize,
        concat!("Alignment of ", stringify!(SceShaccCgSourceLocation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).file) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgSourceLocation),
            "::",
            stringify!(file)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineNumber) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgSourceLocation),
            "::",
            stringify!(lineNumber)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).columnNumber) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgSourceLocation),
            "::",
            stringify!(columnNumber)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceShaccCgCallbackList {
    pub openFile: SceShaccCgCallbackOpenFile,
    pub releaseFile: SceShaccCgCallbackReleaseFile,
    pub locateFile: SceShaccCgCallbackLocateFile,
    pub absolutePath: SceShaccCgCallbackAbsolutePath,
    pub releaseFileName: SceShaccCgCallbackReleaseFileName,
    pub fileDate: SceShaccCgCallbackFileDate,
}
#[test]
fn bindgen_test_layout_SceShaccCgCallbackList() {
    const UNINIT: ::std::mem::MaybeUninit<SceShaccCgCallbackList> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceShaccCgCallbackList>(),
        48usize,
        concat!("Size of: ", stringify!(SceShaccCgCallbackList))
    );
    assert_eq!(
        ::std::mem::align_of::<SceShaccCgCallbackList>(),
        8usize,
        concat!("Alignment of ", stringify!(SceShaccCgCallbackList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).openFile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCallbackList),
            "::",
            stringify!(openFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releaseFile) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCallbackList),
            "::",
            stringify!(releaseFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locateFile) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCallbackList),
            "::",
            stringify!(locateFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).absolutePath) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCallbackList),
            "::",
            stringify!(absolutePath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).releaseFileName) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCallbackList),
            "::",
            stringify!(releaseFileName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fileDate) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCallbackList),
            "::",
            stringify!(fileDate)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceShaccCgCompileOptions {
    pub mainSourceFile: *const ::std::os::raw::c_char,
    pub targetProfile: SceShaccCgTargetProfile,
    pub entryFunctionName: *const ::std::os::raw::c_char,
    pub searchPathCount: SceUInt32,
    pub searchPaths: *const *const ::std::os::raw::c_char,
    pub macroDefinitionCount: SceUInt32,
    pub macroDefinitions: *const *const ::std::os::raw::c_char,
    pub includeFileCount: SceUInt32,
    pub includeFiles: *const *const ::std::os::raw::c_char,
    pub suppressedWarningsCount: SceUInt32,
    pub suppressedWarnings: *const SceUInt32,
    pub locale: SceShaccCgLocale,
    pub useFx: SceInt32,
    pub noStdlib: SceInt32,
    pub optimizationLevel: SceInt32,
    pub useFastmath: SceInt32,
    pub useFastprecision: SceInt32,
    pub useFastint: SceInt32,
    pub field_48: ::std::os::raw::c_int,
    pub warningsAsErrors: SceInt32,
    pub performanceWarnings: SceInt32,
    pub warningLevel: SceInt32,
    pub pedantic: SceInt32,
    pub pedanticError: SceInt32,
    pub field_60: ::std::os::raw::c_int,
    pub field_64: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_SceShaccCgCompileOptions() {
    const UNINIT: ::std::mem::MaybeUninit<SceShaccCgCompileOptions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceShaccCgCompileOptions>(),
        152usize,
        concat!("Size of: ", stringify!(SceShaccCgCompileOptions))
    );
    assert_eq!(
        ::std::mem::align_of::<SceShaccCgCompileOptions>(),
        8usize,
        concat!("Alignment of ", stringify!(SceShaccCgCompileOptions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mainSourceFile) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(mainSourceFile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).targetProfile) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(targetProfile)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entryFunctionName) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(entryFunctionName)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchPathCount) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(searchPathCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).searchPaths) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(searchPaths)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).macroDefinitionCount) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(macroDefinitionCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).macroDefinitions) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(macroDefinitions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).includeFileCount) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(includeFileCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).includeFiles) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(includeFiles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suppressedWarningsCount) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(suppressedWarningsCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).suppressedWarnings) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(suppressedWarnings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).locale) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(locale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useFx) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(useFx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noStdlib) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(noStdlib)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).optimizationLevel) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(optimizationLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useFastmath) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(useFastmath)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useFastprecision) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(useFastprecision)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).useFastint) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(useFastint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_48) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(field_48)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warningsAsErrors) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(warningsAsErrors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).performanceWarnings) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(performanceWarnings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).warningLevel) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(warningLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pedantic) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(pedantic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pedanticError) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(pedanticError)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_60) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(field_60)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).field_64) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOptions),
            "::",
            stringify!(field_64)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceShaccCgDiagnosticMessage {
    pub level: SceShaccCgDiagnosticLevel,
    pub code: SceUInt32,
    pub location: *const SceShaccCgSourceLocation,
    pub message: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_SceShaccCgDiagnosticMessage() {
    const UNINIT: ::std::mem::MaybeUninit<SceShaccCgDiagnosticMessage> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceShaccCgDiagnosticMessage>(),
        24usize,
        concat!("Size of: ", stringify!(SceShaccCgDiagnosticMessage))
    );
    assert_eq!(
        ::std::mem::align_of::<SceShaccCgDiagnosticMessage>(),
        8usize,
        concat!("Alignment of ", stringify!(SceShaccCgDiagnosticMessage))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).level) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgDiagnosticMessage),
            "::",
            stringify!(level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).code) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgDiagnosticMessage),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgDiagnosticMessage),
            "::",
            stringify!(location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).message) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgDiagnosticMessage),
            "::",
            stringify!(message)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceShaccCgCompileOutput {
    pub programData: *const u8,
    pub programSize: SceUInt32,
    pub diagnosticCount: SceInt32,
    pub diagnostics: *const SceShaccCgDiagnosticMessage,
}
#[test]
fn bindgen_test_layout_SceShaccCgCompileOutput() {
    const UNINIT: ::std::mem::MaybeUninit<SceShaccCgCompileOutput> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceShaccCgCompileOutput>(),
        24usize,
        concat!("Size of: ", stringify!(SceShaccCgCompileOutput))
    );
    assert_eq!(
        ::std::mem::align_of::<SceShaccCgCompileOutput>(),
        8usize,
        concat!("Alignment of ", stringify!(SceShaccCgCompileOutput))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).programData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOutput),
            "::",
            stringify!(programData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).programSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOutput),
            "::",
            stringify!(programSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnosticCount) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOutput),
            "::",
            stringify!(diagnosticCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).diagnostics) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceShaccCgCompileOutput),
            "::",
            stringify!(diagnostics)
        )
    );
}
extern "C" {
    pub fn sceShaccCgInitializeCompileOptions(
        options: *mut SceShaccCgCompileOptions,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceShaccCgCompileProgram(
        options: *const SceShaccCgCompileOptions,
        callbacks: *const SceShaccCgCallbackList,
        unk: ::std::os::raw::c_int,
    ) -> *const SceShaccCgCompileOutput;
}
extern "C" {
    pub fn sceShaccCgSetDefaultAllocator(
        malloc_cb: ::std::option::Option<
            unsafe extern "C" fn(arg1: ::std::os::raw::c_uint) -> *mut ::std::os::raw::c_void,
        >,
        free_cb: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceShaccCgInitializeCallbackList(
        callbacks: *mut SceShaccCgCallbackList,
        defaults: SceShaccCgCallbackDefaults,
    );
}
extern "C" {
    pub fn sceShaccCgDestroyCompileOutput(output: *const SceShaccCgCompileOutput);
}
extern "C" {
    pub fn sceShaccCgReleaseCompiler();
}
extern "C" {
    pub fn sceShaccCgGetVersionString() -> *const ::std::os::raw::c_char;
}
pub const SceGxmErrorCode_SCE_GXM_ERROR_UNINITIALIZED: SceGxmErrorCode = 2153447424;
pub const SceGxmErrorCode_SCE_GXM_ERROR_ALREADY_INITIALIZED: SceGxmErrorCode = 2153447425;
pub const SceGxmErrorCode_SCE_GXM_ERROR_OUT_OF_MEMORY: SceGxmErrorCode = 2153447426;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_VALUE: SceGxmErrorCode = 2153447427;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_POINTER: SceGxmErrorCode = 2153447428;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_ALIGNMENT: SceGxmErrorCode = 2153447429;
pub const SceGxmErrorCode_SCE_GXM_ERROR_NOT_WITHIN_SCENE: SceGxmErrorCode = 2153447430;
pub const SceGxmErrorCode_SCE_GXM_ERROR_WITHIN_SCENE: SceGxmErrorCode = 2153447431;
pub const SceGxmErrorCode_SCE_GXM_ERROR_NULL_PROGRAM: SceGxmErrorCode = 2153447432;
pub const SceGxmErrorCode_SCE_GXM_ERROR_UNSUPPORTED: SceGxmErrorCode = 2153447433;
pub const SceGxmErrorCode_SCE_GXM_ERROR_PATCHER_INTERNAL: SceGxmErrorCode = 2153447434;
pub const SceGxmErrorCode_SCE_GXM_ERROR_RESERVE_FAILED: SceGxmErrorCode = 2153447435;
pub const SceGxmErrorCode_SCE_GXM_ERROR_PROGRAM_IN_USE: SceGxmErrorCode = 2153447436;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_INDEX_COUNT: SceGxmErrorCode = 2153447437;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_POLYGON_MODE: SceGxmErrorCode = 2153447438;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_PRECISION: SceGxmErrorCode =
    2153447439;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_SAMPLER_RESULT_TYPE_COMPONENT_COUNT:
    SceGxmErrorCode = 2153447440;
pub const SceGxmErrorCode_SCE_GXM_ERROR_UNIFORM_BUFFER_NOT_RESERVED: SceGxmErrorCode = 2153447441;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_AUXILIARY_SURFACE: SceGxmErrorCode = 2153447443;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_PRECOMPUTED_DRAW: SceGxmErrorCode = 2153447444;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_PRECOMPUTED_VERTEX_STATE: SceGxmErrorCode =
    2153447445;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_PRECOMPUTED_FRAGMENT_STATE: SceGxmErrorCode =
    2153447446;
pub const SceGxmErrorCode_SCE_GXM_ERROR_DRIVER: SceGxmErrorCode = 2153447447;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_TEXTURE: SceGxmErrorCode = 2153447448;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_TEXTURE_DATA_POINTER: SceGxmErrorCode = 2153447449;
pub const SceGxmErrorCode_SCE_GXM_ERROR_INVALID_TEXTURE_PALETTE_POINTER: SceGxmErrorCode =
    2153447450;
pub type SceGxmErrorCode = ::std::os::raw::c_uint;
pub type SceGxmDisplayQueueCallback =
    ::std::option::Option<unsafe extern "C" fn(callbackData: *const ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmInitializeParams {
    pub flags: ::std::os::raw::c_uint,
    pub displayQueueMaxPendingCount: ::std::os::raw::c_uint,
    pub displayQueueCallback: SceGxmDisplayQueueCallback,
    pub displayQueueCallbackDataSize: ::std::os::raw::c_uint,
    pub parameterBufferSize: SceSize,
}
#[test]
fn bindgen_test_layout_SceGxmInitializeParams() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmInitializeParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmInitializeParams>(),
        24usize,
        concat!("Size of: ", stringify!(SceGxmInitializeParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmInitializeParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmInitializeParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmInitializeParams),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayQueueMaxPendingCount) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmInitializeParams),
            "::",
            stringify!(displayQueueMaxPendingCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).displayQueueCallback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmInitializeParams),
            "::",
            stringify!(displayQueueCallback)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).displayQueueCallbackDataSize) as usize - ptr as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmInitializeParams),
            "::",
            stringify!(displayQueueCallbackDataSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parameterBufferSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmInitializeParams),
            "::",
            stringify!(parameterBufferSize)
        )
    );
}
pub const SceGxmMemoryAttribFlags_SCE_GXM_MEMORY_ATTRIB_READ: SceGxmMemoryAttribFlags = 1;
pub const SceGxmMemoryAttribFlags_SCE_GXM_MEMORY_ATTRIB_WRITE: SceGxmMemoryAttribFlags = 2;
pub const SceGxmMemoryAttribFlags_SCE_GXM_MEMORY_ATTRIB_RW: SceGxmMemoryAttribFlags = 3;
pub type SceGxmMemoryAttribFlags = ::std::os::raw::c_uint;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_U8: SceGxmAttributeFormat = 0;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_S8: SceGxmAttributeFormat = 1;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_U16: SceGxmAttributeFormat = 2;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_S16: SceGxmAttributeFormat = 3;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_U8N: SceGxmAttributeFormat = 4;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_S8N: SceGxmAttributeFormat = 5;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_U16N: SceGxmAttributeFormat = 6;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_S16N: SceGxmAttributeFormat = 7;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_F16: SceGxmAttributeFormat = 8;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_F32: SceGxmAttributeFormat = 9;
pub const SceGxmAttributeFormat_SCE_GXM_ATTRIBUTE_FORMAT_UNTYPED: SceGxmAttributeFormat = 10;
pub type SceGxmAttributeFormat = ::std::os::raw::c_uint;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_DF32: SceGxmDepthStencilFormat =
    278528;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_S8: SceGxmDepthStencilFormat =
    139264;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_DF32_S8: SceGxmDepthStencilFormat =
    417792;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_DF32M: SceGxmDepthStencilFormat =
    835584;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_DF32M_S8: SceGxmDepthStencilFormat =
    974848;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_S8D24: SceGxmDepthStencilFormat =
    19292160;
pub const SceGxmDepthStencilFormat_SCE_GXM_DEPTH_STENCIL_FORMAT_D16: SceGxmDepthStencilFormat =
    38027264;
pub type SceGxmDepthStencilFormat = ::std::os::raw::c_uint;
pub const SceGxmPrimitiveType_SCE_GXM_PRIMITIVE_TRIANGLES: SceGxmPrimitiveType = 0;
pub const SceGxmPrimitiveType_SCE_GXM_PRIMITIVE_LINES: SceGxmPrimitiveType = 67108864;
pub const SceGxmPrimitiveType_SCE_GXM_PRIMITIVE_POINTS: SceGxmPrimitiveType = 134217728;
pub const SceGxmPrimitiveType_SCE_GXM_PRIMITIVE_TRIANGLE_STRIP: SceGxmPrimitiveType = 201326592;
pub const SceGxmPrimitiveType_SCE_GXM_PRIMITIVE_TRIANGLE_FAN: SceGxmPrimitiveType = 268435456;
pub const SceGxmPrimitiveType_SCE_GXM_PRIMITIVE_TRIANGLE_EDGES: SceGxmPrimitiveType = 335544320;
pub type SceGxmPrimitiveType = ::std::os::raw::c_uint;
pub const SceGxmEdgeEnableFlags_SCE_GXM_EDGE_ENABLE_01: SceGxmEdgeEnableFlags = 256;
pub const SceGxmEdgeEnableFlags_SCE_GXM_EDGE_ENABLE_12: SceGxmEdgeEnableFlags = 512;
pub const SceGxmEdgeEnableFlags_SCE_GXM_EDGE_ENABLE_20: SceGxmEdgeEnableFlags = 1024;
pub type SceGxmEdgeEnableFlags = ::std::os::raw::c_uint;
pub const SceGxmRegionClipMode_SCE_GXM_REGION_CLIP_NONE: SceGxmRegionClipMode = 0;
pub const SceGxmRegionClipMode_SCE_GXM_REGION_CLIP_ALL: SceGxmRegionClipMode = 1073741824;
pub const SceGxmRegionClipMode_SCE_GXM_REGION_CLIP_OUTSIDE: SceGxmRegionClipMode = 2147483648;
pub const SceGxmRegionClipMode_SCE_GXM_REGION_CLIP_INSIDE: SceGxmRegionClipMode = 3221225472;
pub type SceGxmRegionClipMode = ::std::os::raw::c_uint;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_NEVER: SceGxmDepthFunc = 0;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_LESS: SceGxmDepthFunc = 4194304;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_EQUAL: SceGxmDepthFunc = 8388608;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_LESS_EQUAL: SceGxmDepthFunc = 12582912;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_GREATER: SceGxmDepthFunc = 16777216;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_NOT_EQUAL: SceGxmDepthFunc = 20971520;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_GREATER_EQUAL: SceGxmDepthFunc = 25165824;
pub const SceGxmDepthFunc_SCE_GXM_DEPTH_FUNC_ALWAYS: SceGxmDepthFunc = 29360128;
pub type SceGxmDepthFunc = ::std::os::raw::c_uint;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_NEVER: SceGxmStencilFunc = 0;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_LESS: SceGxmStencilFunc = 33554432;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_EQUAL: SceGxmStencilFunc = 67108864;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_LESS_EQUAL: SceGxmStencilFunc = 100663296;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_GREATER: SceGxmStencilFunc = 134217728;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_NOT_EQUAL: SceGxmStencilFunc = 167772160;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_GREATER_EQUAL: SceGxmStencilFunc = 201326592;
pub const SceGxmStencilFunc_SCE_GXM_STENCIL_FUNC_ALWAYS: SceGxmStencilFunc = 234881024;
pub type SceGxmStencilFunc = ::std::os::raw::c_uint;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_KEEP: SceGxmStencilOp = 0;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_ZERO: SceGxmStencilOp = 1;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_REPLACE: SceGxmStencilOp = 2;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_INCR: SceGxmStencilOp = 3;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_DECR: SceGxmStencilOp = 4;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_INVERT: SceGxmStencilOp = 5;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_INCR_WRAP: SceGxmStencilOp = 6;
pub const SceGxmStencilOp_SCE_GXM_STENCIL_OP_DECR_WRAP: SceGxmStencilOp = 7;
pub type SceGxmStencilOp = ::std::os::raw::c_uint;
pub const SceGxmCullMode_SCE_GXM_CULL_NONE: SceGxmCullMode = 0;
pub const SceGxmCullMode_SCE_GXM_CULL_CW: SceGxmCullMode = 1;
pub const SceGxmCullMode_SCE_GXM_CULL_CCW: SceGxmCullMode = 2;
pub type SceGxmCullMode = ::std::os::raw::c_uint;
pub const SceGxmPassType_SCE_GXM_PASS_TYPE_OPAQUE: SceGxmPassType = 0;
pub const SceGxmPassType_SCE_GXM_PASS_TYPE_TRANSLUCENT: SceGxmPassType = 33554432;
pub const SceGxmPassType_SCE_GXM_PASS_TYPE_DISCARD: SceGxmPassType = 67108864;
pub const SceGxmPassType_SCE_GXM_PASS_TYPE_MASK_UPDATE: SceGxmPassType = 100663296;
pub const SceGxmPassType_SCE_GXM_PASS_TYPE_DEPTH_REPLACE: SceGxmPassType = 167772160;
pub type SceGxmPassType = ::std::os::raw::c_uint;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_TRIANGLE_FILL: SceGxmPolygonMode = 0;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_LINE: SceGxmPolygonMode = 32768;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_POINT_10UV: SceGxmPolygonMode = 65536;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_POINT: SceGxmPolygonMode = 98304;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_POINT_01UV: SceGxmPolygonMode = 131072;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_TRIANGLE_LINE: SceGxmPolygonMode = 163840;
pub const SceGxmPolygonMode_SCE_GXM_POLYGON_MODE_TRIANGLE_POINT: SceGxmPolygonMode = 196608;
pub type SceGxmPolygonMode = ::std::os::raw::c_uint;
pub const SceGxmColorSwizzle4Mode_SCE_GXM_COLOR_SWIZZLE4_ABGR: SceGxmColorSwizzle4Mode = 0;
pub const SceGxmColorSwizzle4Mode_SCE_GXM_COLOR_SWIZZLE4_ARGB: SceGxmColorSwizzle4Mode = 1048576;
pub const SceGxmColorSwizzle4Mode_SCE_GXM_COLOR_SWIZZLE4_RGBA: SceGxmColorSwizzle4Mode = 2097152;
pub const SceGxmColorSwizzle4Mode_SCE_GXM_COLOR_SWIZZLE4_BGRA: SceGxmColorSwizzle4Mode = 3145728;
pub type SceGxmColorSwizzle4Mode = ::std::os::raw::c_uint;
pub const SceGxmColorSwizzle3Mode_SCE_GXM_COLOR_SWIZZLE3_BGR: SceGxmColorSwizzle3Mode = 0;
pub const SceGxmColorSwizzle3Mode_SCE_GXM_COLOR_SWIZZLE3_RGB: SceGxmColorSwizzle3Mode = 1048576;
pub type SceGxmColorSwizzle3Mode = ::std::os::raw::c_uint;
pub const SceGxmColorSwizzle2Mode_SCE_GXM_COLOR_SWIZZLE2_GR: SceGxmColorSwizzle2Mode = 0;
pub const SceGxmColorSwizzle2Mode_SCE_GXM_COLOR_SWIZZLE2_RG: SceGxmColorSwizzle2Mode = 1048576;
pub const SceGxmColorSwizzle2Mode_SCE_GXM_COLOR_SWIZZLE2_RA: SceGxmColorSwizzle2Mode = 2097152;
pub const SceGxmColorSwizzle2Mode_SCE_GXM_COLOR_SWIZZLE2_AR: SceGxmColorSwizzle2Mode = 3145728;
pub type SceGxmColorSwizzle2Mode = ::std::os::raw::c_uint;
pub const SceGxmColorSwizzle1Mode_SCE_GXM_COLOR_SWIZZLE1_R: SceGxmColorSwizzle1Mode = 0;
pub const SceGxmColorSwizzle1Mode_SCE_GXM_COLOR_SWIZZLE1_G: SceGxmColorSwizzle1Mode = 1048576;
pub const SceGxmColorSwizzle1Mode_SCE_GXM_COLOR_SWIZZLE1_A: SceGxmColorSwizzle1Mode = 1048576;
pub type SceGxmColorSwizzle1Mode = ::std::os::raw::c_uint;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U8U8U8U8: SceGxmColorBaseFormat = 0;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U8U8U8: SceGxmColorBaseFormat = 268435456;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U5U6U5: SceGxmColorBaseFormat = 805306368;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U1U5U5U5: SceGxmColorBaseFormat =
    1073741824;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U4U4U4U4: SceGxmColorBaseFormat =
    1342177280;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U8U3U3U2: SceGxmColorBaseFormat =
    1610612736;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_F16: SceGxmColorBaseFormat = 4026531840;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_F16F16: SceGxmColorBaseFormat = 8388608;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_F32: SceGxmColorBaseFormat = 276824064;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_S16: SceGxmColorBaseFormat = 545259520;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_S16S16: SceGxmColorBaseFormat = 813694976;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U16: SceGxmColorBaseFormat = 1082130432;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U16U16: SceGxmColorBaseFormat =
    1350565888;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U2U10U10U10: SceGxmColorBaseFormat =
    1619001344;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U8: SceGxmColorBaseFormat = 2155872256;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_S8: SceGxmColorBaseFormat = 2424307712;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_S5S5U6: SceGxmColorBaseFormat =
    2692743168;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U8U8: SceGxmColorBaseFormat = 2961178624;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_S8S8: SceGxmColorBaseFormat = 3229614080;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U8S8S8U8: SceGxmColorBaseFormat =
    3498049536;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_S8S8S8S8: SceGxmColorBaseFormat =
    3766484992;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_F16F16F16F16: SceGxmColorBaseFormat =
    16777216;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_F32F32: SceGxmColorBaseFormat = 285212672;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_F11F11F10: SceGxmColorBaseFormat =
    553648128;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_SE5M9M9M9: SceGxmColorBaseFormat =
    822083584;
pub const SceGxmColorBaseFormat_SCE_GXM_COLOR_BASE_FORMAT_U2F10F10F10: SceGxmColorBaseFormat =
    1090519040;
pub type SceGxmColorBaseFormat = ::std::os::raw::c_uint;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8U8U8_ABGR: SceGxmColorFormat = 0;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8U8U8_ARGB: SceGxmColorFormat = 1048576;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8U8U8_RGBA: SceGxmColorFormat = 2097152;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8U8U8_BGRA: SceGxmColorFormat = 3145728;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8U8_BGR: SceGxmColorFormat = 268435456;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8U8_RGB: SceGxmColorFormat = 269484032;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U5U6U5_BGR: SceGxmColorFormat = 805306368;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U5U6U5_RGB: SceGxmColorFormat = 806354944;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U1U5U5U5_ABGR: SceGxmColorFormat = 1073741824;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U1U5U5U5_ARGB: SceGxmColorFormat = 1074790400;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U5U5U5U1_RGBA: SceGxmColorFormat = 1075838976;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U5U5U5U1_BGRA: SceGxmColorFormat = 1076887552;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U4U4U4U4_ABGR: SceGxmColorFormat = 1342177280;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U4U4U4U4_ARGB: SceGxmColorFormat = 1343225856;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U4U4U4U4_RGBA: SceGxmColorFormat = 1344274432;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U4U4U4U4_BGRA: SceGxmColorFormat = 1345323008;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U3U3U2_ARGB: SceGxmColorFormat = 1610612736;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16_R: SceGxmColorFormat = 4026531840;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16_G: SceGxmColorFormat = 4027580416;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16F16_GR: SceGxmColorFormat = 8388608;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16F16_RG: SceGxmColorFormat = 9437184;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F32_R: SceGxmColorFormat = 276824064;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S16_R: SceGxmColorFormat = 545259520;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S16_G: SceGxmColorFormat = 546308096;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S16S16_GR: SceGxmColorFormat = 813694976;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S16S16_RG: SceGxmColorFormat = 814743552;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U16_R: SceGxmColorFormat = 1082130432;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U16_G: SceGxmColorFormat = 1083179008;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U16U16_GR: SceGxmColorFormat = 1350565888;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U16U16_RG: SceGxmColorFormat = 1351614464;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U2U10U10U10_ABGR: SceGxmColorFormat = 1619001344;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U2U10U10U10_ARGB: SceGxmColorFormat = 1620049920;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U10U10U10U2_RGBA: SceGxmColorFormat = 1621098496;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U10U10U10U2_BGRA: SceGxmColorFormat = 1622147072;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8_R: SceGxmColorFormat = 2155872256;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8_A: SceGxmColorFormat = 2156920832;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8_R: SceGxmColorFormat = 2424307712;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8_A: SceGxmColorFormat = 2425356288;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U6S5S5_BGR: SceGxmColorFormat = 2692743168;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S5S5U6_RGB: SceGxmColorFormat = 2693791744;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8_GR: SceGxmColorFormat = 2961178624;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8_RG: SceGxmColorFormat = 2962227200;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8_RA: SceGxmColorFormat = 2963275776;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8_AR: SceGxmColorFormat = 2964324352;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8_GR: SceGxmColorFormat = 3229614080;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8_RG: SceGxmColorFormat = 3230662656;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8_RA: SceGxmColorFormat = 3231711232;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8_AR: SceGxmColorFormat = 3232759808;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8S8S8U8_ABGR: SceGxmColorFormat = 3498049536;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8U8S8S8_ARGB: SceGxmColorFormat = 3499098112;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U8S8S8U8_RGBA: SceGxmColorFormat = 3500146688;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8U8U8_BGRA: SceGxmColorFormat = 3501195264;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8S8S8_ABGR: SceGxmColorFormat = 3766484992;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8S8S8_ARGB: SceGxmColorFormat = 3767533568;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8S8S8_RGBA: SceGxmColorFormat = 3768582144;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_S8S8S8S8_BGRA: SceGxmColorFormat = 3769630720;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16F16F16F16_ABGR: SceGxmColorFormat = 16777216;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16F16F16F16_ARGB: SceGxmColorFormat = 17825792;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16F16F16F16_RGBA: SceGxmColorFormat = 18874368;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F16F16F16F16_BGRA: SceGxmColorFormat = 19922944;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F32F32_GR: SceGxmColorFormat = 285212672;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F32F32_RG: SceGxmColorFormat = 286261248;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F10F11F11_BGR: SceGxmColorFormat = 553648128;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F11F11F10_RGB: SceGxmColorFormat = 554696704;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_SE5M9M9M9_BGR: SceGxmColorFormat = 822083584;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_SE5M9M9M9_RGB: SceGxmColorFormat = 823132160;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U2F10F10F10_ABGR: SceGxmColorFormat = 1090519040;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_U2F10F10F10_ARGB: SceGxmColorFormat = 1091567616;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F10F10F10U2_RGBA: SceGxmColorFormat = 1092616192;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_F10F10F10U2_BGRA: SceGxmColorFormat = 1093664768;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_A8B8G8R8: SceGxmColorFormat = 0;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_A8R8G8B8: SceGxmColorFormat = 1048576;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_R5G6B5: SceGxmColorFormat = 806354944;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_A1R5G5B5: SceGxmColorFormat = 1074790400;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_A4R4G4B4: SceGxmColorFormat = 1343225856;
pub const SceGxmColorFormat_SCE_GXM_COLOR_FORMAT_A8: SceGxmColorFormat = 2156920832;
#[doc = "! Supported color formats"]
pub type SceGxmColorFormat = ::std::os::raw::c_uint;
pub const SceGxmColorSurfaceType_SCE_GXM_COLOR_SURFACE_LINEAR: SceGxmColorSurfaceType = 0;
pub const SceGxmColorSurfaceType_SCE_GXM_COLOR_SURFACE_TILED: SceGxmColorSurfaceType = 67108864;
pub const SceGxmColorSurfaceType_SCE_GXM_COLOR_SURFACE_SWIZZLED: SceGxmColorSurfaceType = 134217728;
pub type SceGxmColorSurfaceType = ::std::os::raw::c_uint;
pub const SceGxmColorSurfaceGammaMode_SCE_GXM_COLOR_SURFACE_GAMMA_NONE:
    SceGxmColorSurfaceGammaMode = 0;
pub const SceGxmColorSurfaceGammaMode_SCE_GXM_COLOR_SURFACE_GAMMA_R: SceGxmColorSurfaceGammaMode =
    4096;
pub const SceGxmColorSurfaceGammaMode_SCE_GXM_COLOR_SURFACE_GAMMA_GR: SceGxmColorSurfaceGammaMode =
    12288;
pub const SceGxmColorSurfaceGammaMode_SCE_GXM_COLOR_SURFACE_GAMMA_BGR: SceGxmColorSurfaceGammaMode =
    4096;
pub type SceGxmColorSurfaceGammaMode = ::std::os::raw::c_uint;
pub const SceGxmColorSurfaceDitherMode_SCE_GXM_COLOR_SURFACE_DITHER_DISABLED:
    SceGxmColorSurfaceDitherMode = 0;
pub const SceGxmColorSurfaceDitherMode_SCE_GXM_COLOR_SURFACE_DITHER_ENABLED:
    SceGxmColorSurfaceDitherMode = 8;
pub type SceGxmColorSurfaceDitherMode = ::std::os::raw::c_uint;
pub const SceGxmDepthStencilSurfaceType_SCE_GXM_DEPTH_STENCIL_SURFACE_LINEAR:
    SceGxmDepthStencilSurfaceType = 0;
pub const SceGxmDepthStencilSurfaceType_SCE_GXM_DEPTH_STENCIL_SURFACE_TILED:
    SceGxmDepthStencilSurfaceType = 69632;
pub type SceGxmDepthStencilSurfaceType = ::std::os::raw::c_uint;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_DECLARED:
    SceGxmOutputRegisterFormat = 0;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_UCHAR4:
    SceGxmOutputRegisterFormat = 1;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_CHAR4:
    SceGxmOutputRegisterFormat = 2;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_USHORT2:
    SceGxmOutputRegisterFormat = 3;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_SHORT2:
    SceGxmOutputRegisterFormat = 4;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF4:
    SceGxmOutputRegisterFormat = 5;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_HALF2:
    SceGxmOutputRegisterFormat = 6;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT2:
    SceGxmOutputRegisterFormat = 7;
pub const SceGxmOutputRegisterFormat_SCE_GXM_OUTPUT_REGISTER_FORMAT_FLOAT:
    SceGxmOutputRegisterFormat = 8;
pub type SceGxmOutputRegisterFormat = ::std::os::raw::c_uint;
pub const SceGxmMultisampleMode_SCE_GXM_MULTISAMPLE_NONE: SceGxmMultisampleMode = 0;
pub const SceGxmMultisampleMode_SCE_GXM_MULTISAMPLE_2X: SceGxmMultisampleMode = 1;
pub const SceGxmMultisampleMode_SCE_GXM_MULTISAMPLE_4X: SceGxmMultisampleMode = 2;
pub type SceGxmMultisampleMode = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_ABGR: SceGxmTextureSwizzle4Mode = 0;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_ARGB: SceGxmTextureSwizzle4Mode = 4096;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_RGBA: SceGxmTextureSwizzle4Mode = 8192;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_BGRA: SceGxmTextureSwizzle4Mode =
    12288;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_1BGR: SceGxmTextureSwizzle4Mode =
    16384;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_1RGB: SceGxmTextureSwizzle4Mode =
    20480;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_RGB1: SceGxmTextureSwizzle4Mode =
    24576;
pub const SceGxmTextureSwizzle4Mode_SCE_GXM_TEXTURE_SWIZZLE4_BGR1: SceGxmTextureSwizzle4Mode =
    28672;
pub type SceGxmTextureSwizzle4Mode = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzle3Mode_SCE_GXM_TEXTURE_SWIZZLE3_BGR: SceGxmTextureSwizzle3Mode = 0;
pub const SceGxmTextureSwizzle3Mode_SCE_GXM_TEXTURE_SWIZZLE3_RGB: SceGxmTextureSwizzle3Mode = 4096;
pub type SceGxmTextureSwizzle3Mode = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzle2Mode_SCE_GXM_TEXTURE_SWIZZLE2_GR: SceGxmTextureSwizzle2Mode = 0;
pub const SceGxmTextureSwizzle2Mode_SCE_GXM_TEXTURE_SWIZZLE2_00GR: SceGxmTextureSwizzle2Mode = 4096;
pub const SceGxmTextureSwizzle2Mode_SCE_GXM_TEXTURE_SWIZZLE2_GRRR: SceGxmTextureSwizzle2Mode = 8192;
pub const SceGxmTextureSwizzle2Mode_SCE_GXM_TEXTURE_SWIZZLE2_RGGG: SceGxmTextureSwizzle2Mode =
    12288;
pub const SceGxmTextureSwizzle2Mode_SCE_GXM_TEXTURE_SWIZZLE2_GRGR: SceGxmTextureSwizzle2Mode =
    16384;
pub const SceGxmTextureSwizzle2Mode_SCE_GXM_TEXTURE_SWIZZLE2_00RG: SceGxmTextureSwizzle2Mode =
    20480;
pub type SceGxmTextureSwizzle2Mode = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzle2ModeAlt_SCE_GXM_TEXTURE_SWIZZLE2_SD: SceGxmTextureSwizzle2ModeAlt =
    0;
pub const SceGxmTextureSwizzle2ModeAlt_SCE_GXM_TEXTURE_SWIZZLE2_DS: SceGxmTextureSwizzle2ModeAlt =
    4096;
pub type SceGxmTextureSwizzle2ModeAlt = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_R: SceGxmTextureSwizzle1Mode = 0;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_000R: SceGxmTextureSwizzle1Mode = 4096;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_111R: SceGxmTextureSwizzle1Mode = 8192;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_RRRR: SceGxmTextureSwizzle1Mode =
    12288;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_0RRR: SceGxmTextureSwizzle1Mode =
    16384;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_1RRR: SceGxmTextureSwizzle1Mode =
    20480;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_R000: SceGxmTextureSwizzle1Mode =
    24576;
pub const SceGxmTextureSwizzle1Mode_SCE_GXM_TEXTURE_SWIZZLE1_R111: SceGxmTextureSwizzle1Mode =
    28672;
pub type SceGxmTextureSwizzle1Mode = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC0:
    SceGxmTextureSwizzleYUV422Mode = 0;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC0:
    SceGxmTextureSwizzleYUV422Mode = 4096;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC0:
    SceGxmTextureSwizzleYUV422Mode = 8192;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC0:
    SceGxmTextureSwizzleYUV422Mode = 12288;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_YUYV_CSC1:
    SceGxmTextureSwizzleYUV422Mode = 16384;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_YVYU_CSC1:
    SceGxmTextureSwizzleYUV422Mode = 20480;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_UYVY_CSC1:
    SceGxmTextureSwizzleYUV422Mode = 24576;
pub const SceGxmTextureSwizzleYUV422Mode_SCE_GXM_TEXTURE_SWIZZLE_VYUY_CSC1:
    SceGxmTextureSwizzleYUV422Mode = 28672;
pub type SceGxmTextureSwizzleYUV422Mode = ::std::os::raw::c_uint;
pub const SceGxmTextureSwizzleYUV420Mode_SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC0:
    SceGxmTextureSwizzleYUV420Mode = 0;
pub const SceGxmTextureSwizzleYUV420Mode_SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC0:
    SceGxmTextureSwizzleYUV420Mode = 4096;
pub const SceGxmTextureSwizzleYUV420Mode_SCE_GXM_TEXTURE_SWIZZLE_YUV_CSC1:
    SceGxmTextureSwizzleYUV420Mode = 8192;
pub const SceGxmTextureSwizzleYUV420Mode_SCE_GXM_TEXTURE_SWIZZLE_YVU_CSC1:
    SceGxmTextureSwizzleYUV420Mode = 12288;
pub type SceGxmTextureSwizzleYUV420Mode = ::std::os::raw::c_uint;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U8: SceGxmTextureBaseFormat = 0;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S8: SceGxmTextureBaseFormat =
    16777216;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U4U4U4U4: SceGxmTextureBaseFormat =
    33554432;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U8U3U3U2: SceGxmTextureBaseFormat =
    50331648;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U1U5U5U5: SceGxmTextureBaseFormat =
    67108864;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U5U6U5: SceGxmTextureBaseFormat =
    83886080;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S5S5U6: SceGxmTextureBaseFormat =
    100663296;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U8U8: SceGxmTextureBaseFormat =
    117440512;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S8S8: SceGxmTextureBaseFormat =
    134217728;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U16: SceGxmTextureBaseFormat =
    150994944;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S16: SceGxmTextureBaseFormat =
    167772160;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F16: SceGxmTextureBaseFormat =
    184549376;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8U8: SceGxmTextureBaseFormat =
    201326592;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8S8: SceGxmTextureBaseFormat =
    218103808;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U2U10U10U10: SceGxmTextureBaseFormat =
    234881024;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U16U16: SceGxmTextureBaseFormat =
    251658240;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S16S16: SceGxmTextureBaseFormat =
    268435456;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F16F16: SceGxmTextureBaseFormat =
    285212672;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F32: SceGxmTextureBaseFormat =
    301989888;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F32M: SceGxmTextureBaseFormat =
    318767104;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_X8S8S8U8: SceGxmTextureBaseFormat =
    335544320;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_X8U24: SceGxmTextureBaseFormat =
    352321536;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U32: SceGxmTextureBaseFormat =
    385875968;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S32: SceGxmTextureBaseFormat =
    402653184;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_SE5M9M9M9: SceGxmTextureBaseFormat =
    419430400;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F11F11F10: SceGxmTextureBaseFormat =
    436207616;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F16F16F16F16:
    SceGxmTextureBaseFormat = 452984832;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U16U16U16U16:
    SceGxmTextureBaseFormat = 469762048;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S16S16S16S16:
    SceGxmTextureBaseFormat = 486539264;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_F32F32: SceGxmTextureBaseFormat =
    503316480;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U32U32: SceGxmTextureBaseFormat =
    520093696;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_PVRT2BPP: SceGxmTextureBaseFormat =
    2147483648;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_PVRT4BPP: SceGxmTextureBaseFormat =
    2164260864;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII2BPP: SceGxmTextureBaseFormat =
    2181038080;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_PVRTII4BPP: SceGxmTextureBaseFormat =
    2197815296;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_UBC1: SceGxmTextureBaseFormat =
    2231369728;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_UBC2: SceGxmTextureBaseFormat =
    2248146944;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_UBC3: SceGxmTextureBaseFormat =
    2264924160;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_UBC4: SceGxmTextureBaseFormat =
    2281701376;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_SBC4: SceGxmTextureBaseFormat =
    2298478592;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_UBC5: SceGxmTextureBaseFormat =
    2315255808;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_SBC5: SceGxmTextureBaseFormat =
    2332033024;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P2: SceGxmTextureBaseFormat =
    2415919104;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_YUV420P3: SceGxmTextureBaseFormat =
    2432696320;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_YUV422: SceGxmTextureBaseFormat =
    2449473536;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_P4: SceGxmTextureBaseFormat =
    2483027968;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_P8: SceGxmTextureBaseFormat =
    2499805184;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U8U8U8: SceGxmTextureBaseFormat =
    2550136832;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_S8S8S8: SceGxmTextureBaseFormat =
    2566914048;
pub const SceGxmTextureBaseFormat_SCE_GXM_TEXTURE_BASE_FORMAT_U2F10F10F10: SceGxmTextureBaseFormat =
    2583691264;
pub type SceGxmTextureBaseFormat = ::std::os::raw::c_uint;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_000R: SceGxmTextureFormat = 4096;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_111R: SceGxmTextureFormat = 8192;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_RRRR: SceGxmTextureFormat = 12288;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_0RRR: SceGxmTextureFormat = 16384;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_1RRR: SceGxmTextureFormat = 20480;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_R000: SceGxmTextureFormat = 24576;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_R111: SceGxmTextureFormat = 28672;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8_R: SceGxmTextureFormat = 0;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_000R: SceGxmTextureFormat = 16781312;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_111R: SceGxmTextureFormat = 16785408;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_RRRR: SceGxmTextureFormat = 16789504;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_0RRR: SceGxmTextureFormat = 16793600;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_1RRR: SceGxmTextureFormat = 16797696;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_R000: SceGxmTextureFormat = 16801792;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_R111: SceGxmTextureFormat = 16805888;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8_R: SceGxmTextureFormat = 16777216;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ABGR: SceGxmTextureFormat = 33554432;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_ARGB: SceGxmTextureFormat = 33558528;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_RGBA: SceGxmTextureFormat = 33562624;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U4U4U4U4_BGRA: SceGxmTextureFormat = 33566720;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1BGR: SceGxmTextureFormat = 33570816;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X4U4U4U4_1RGB: SceGxmTextureFormat = 33574912;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_RGB1: SceGxmTextureFormat = 33579008;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U4U4U4X4_BGR1: SceGxmTextureFormat = 33583104;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U3U3U2_ARGB: SceGxmTextureFormat = 50331648;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ABGR: SceGxmTextureFormat = 67108864;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U1U5U5U5_ARGB: SceGxmTextureFormat = 67112960;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_RGBA: SceGxmTextureFormat = 67117056;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U5U5U5U1_BGRA: SceGxmTextureFormat = 67121152;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1BGR: SceGxmTextureFormat = 67125248;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X1U5U5U5_1RGB: SceGxmTextureFormat = 67129344;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_RGB1: SceGxmTextureFormat = 67133440;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U5U5U5X1_BGR1: SceGxmTextureFormat = 67137536;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U5U6U5_BGR: SceGxmTextureFormat = 83886080;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U5U6U5_RGB: SceGxmTextureFormat = 83890176;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U6S5S5_BGR: SceGxmTextureFormat = 100663296;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S5S5U6_RGB: SceGxmTextureFormat = 100667392;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8_00GR: SceGxmTextureFormat = 117444608;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8_GRRR: SceGxmTextureFormat = 117448704;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8_RGGG: SceGxmTextureFormat = 117452800;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8_GRGR: SceGxmTextureFormat = 117456896;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8_00RG: SceGxmTextureFormat = 117460992;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8_GR: SceGxmTextureFormat = 117440512;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8_00GR: SceGxmTextureFormat = 134221824;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8_GRRR: SceGxmTextureFormat = 134225920;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8_RGGG: SceGxmTextureFormat = 134230016;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8_GRGR: SceGxmTextureFormat = 134234112;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8_00RG: SceGxmTextureFormat = 134238208;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8_GR: SceGxmTextureFormat = 134217728;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_000R: SceGxmTextureFormat = 150999040;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_111R: SceGxmTextureFormat = 151003136;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_RRRR: SceGxmTextureFormat = 151007232;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_0RRR: SceGxmTextureFormat = 151011328;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_1RRR: SceGxmTextureFormat = 151015424;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_R000: SceGxmTextureFormat = 151019520;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_R111: SceGxmTextureFormat = 151023616;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16_R: SceGxmTextureFormat = 150994944;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_000R: SceGxmTextureFormat = 167776256;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_111R: SceGxmTextureFormat = 167780352;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_RRRR: SceGxmTextureFormat = 167784448;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_0RRR: SceGxmTextureFormat = 167788544;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_1RRR: SceGxmTextureFormat = 167792640;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_R000: SceGxmTextureFormat = 167796736;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_R111: SceGxmTextureFormat = 167800832;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16_R: SceGxmTextureFormat = 167772160;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_000R: SceGxmTextureFormat = 184553472;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_111R: SceGxmTextureFormat = 184557568;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_RRRR: SceGxmTextureFormat = 184561664;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_0RRR: SceGxmTextureFormat = 184565760;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_1RRR: SceGxmTextureFormat = 184569856;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_R000: SceGxmTextureFormat = 184573952;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_R111: SceGxmTextureFormat = 184578048;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16_R: SceGxmTextureFormat = 184549376;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ABGR: SceGxmTextureFormat = 201326592;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_ARGB: SceGxmTextureFormat = 201330688;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_RGBA: SceGxmTextureFormat = 201334784;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8U8_BGRA: SceGxmTextureFormat = 201338880;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1BGR: SceGxmTextureFormat = 201342976;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8U8U8U8_1RGB: SceGxmTextureFormat = 201347072;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_RGB1: SceGxmTextureFormat = 201351168;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8X8_BGR1: SceGxmTextureFormat = 201355264;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ABGR: SceGxmTextureFormat = 218103808;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_ARGB: SceGxmTextureFormat = 218107904;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_RGBA: SceGxmTextureFormat = 218112000;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8S8_BGRA: SceGxmTextureFormat = 218116096;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1BGR: SceGxmTextureFormat = 218120192;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8S8S8S8_1RGB: SceGxmTextureFormat = 218124288;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_RGB1: SceGxmTextureFormat = 218128384;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8X8_BGR1: SceGxmTextureFormat = 218132480;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ABGR: SceGxmTextureFormat =
    234881024;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U2U10U10U10_ARGB: SceGxmTextureFormat =
    234885120;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_RGBA: SceGxmTextureFormat =
    234889216;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U10U10U10U2_BGRA: SceGxmTextureFormat =
    234893312;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1BGR: SceGxmTextureFormat =
    234897408;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X2U10U10U10_1RGB: SceGxmTextureFormat =
    234901504;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_RGB1: SceGxmTextureFormat =
    234905600;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U10U10U10X2_BGR1: SceGxmTextureFormat =
    234909696;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16_00GR: SceGxmTextureFormat = 251662336;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16_GRRR: SceGxmTextureFormat = 251666432;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16_RGGG: SceGxmTextureFormat = 251670528;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16_GRGR: SceGxmTextureFormat = 251674624;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16_00RG: SceGxmTextureFormat = 251678720;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16_GR: SceGxmTextureFormat = 251658240;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16_00GR: SceGxmTextureFormat = 268439552;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16_GRRR: SceGxmTextureFormat = 268443648;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16_RGGG: SceGxmTextureFormat = 268447744;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16_GRGR: SceGxmTextureFormat = 268451840;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16_00RG: SceGxmTextureFormat = 268455936;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16_GR: SceGxmTextureFormat = 268435456;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16_00GR: SceGxmTextureFormat = 285216768;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16_GRRR: SceGxmTextureFormat = 285220864;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16_RGGG: SceGxmTextureFormat = 285224960;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16_GRGR: SceGxmTextureFormat = 285229056;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16_00RG: SceGxmTextureFormat = 285233152;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16_GR: SceGxmTextureFormat = 285212672;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_000R: SceGxmTextureFormat = 301993984;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_111R: SceGxmTextureFormat = 301998080;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_RRRR: SceGxmTextureFormat = 302002176;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_0RRR: SceGxmTextureFormat = 302006272;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_1RRR: SceGxmTextureFormat = 302010368;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_R000: SceGxmTextureFormat = 302014464;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_R111: SceGxmTextureFormat = 302018560;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32_R: SceGxmTextureFormat = 301989888;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_000R: SceGxmTextureFormat = 318771200;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_111R: SceGxmTextureFormat = 318775296;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_RRRR: SceGxmTextureFormat = 318779392;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_0RRR: SceGxmTextureFormat = 318783488;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_1RRR: SceGxmTextureFormat = 318787584;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_R000: SceGxmTextureFormat = 318791680;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_R111: SceGxmTextureFormat = 318795776;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32M_R: SceGxmTextureFormat = 318767104;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8S8S8U8_1BGR: SceGxmTextureFormat = 335544320;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8U8S8S8_1RGB: SceGxmTextureFormat = 335548416;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X8U24_SD: SceGxmTextureFormat = 352321536;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U24X8_DS: SceGxmTextureFormat = 352325632;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_000R: SceGxmTextureFormat = 385880064;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_111R: SceGxmTextureFormat = 385884160;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_RRRR: SceGxmTextureFormat = 385888256;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_0RRR: SceGxmTextureFormat = 385892352;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_1RRR: SceGxmTextureFormat = 385896448;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_R000: SceGxmTextureFormat = 385900544;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_R111: SceGxmTextureFormat = 385904640;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32_R: SceGxmTextureFormat = 385875968;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_000R: SceGxmTextureFormat = 402657280;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_111R: SceGxmTextureFormat = 402661376;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_RRRR: SceGxmTextureFormat = 402665472;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_0RRR: SceGxmTextureFormat = 402669568;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_1RRR: SceGxmTextureFormat = 402673664;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_R000: SceGxmTextureFormat = 402677760;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_R111: SceGxmTextureFormat = 402681856;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S32_R: SceGxmTextureFormat = 402653184;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_BGR: SceGxmTextureFormat = 419430400;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SE5M9M9M9_RGB: SceGxmTextureFormat = 419434496;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F10F11F11_BGR: SceGxmTextureFormat = 436207616;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F11F11F10_RGB: SceGxmTextureFormat = 436211712;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ABGR: SceGxmTextureFormat =
    452984832;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_ARGB: SceGxmTextureFormat =
    452988928;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_RGBA: SceGxmTextureFormat =
    452993024;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16F16F16_BGRA: SceGxmTextureFormat =
    452997120;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1BGR: SceGxmTextureFormat =
    453001216;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X16F16F16F16_1RGB: SceGxmTextureFormat =
    453005312;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_RGB1: SceGxmTextureFormat =
    453009408;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F16F16F16X16_BGR1: SceGxmTextureFormat =
    453013504;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ABGR: SceGxmTextureFormat =
    469762048;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_ARGB: SceGxmTextureFormat =
    469766144;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_RGBA: SceGxmTextureFormat =
    469770240;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16U16U16_BGRA: SceGxmTextureFormat =
    469774336;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1BGR: SceGxmTextureFormat =
    469778432;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X16U16U16U16_1RGB: SceGxmTextureFormat =
    469782528;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_RGB1: SceGxmTextureFormat =
    469786624;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U16U16U16X16_BGR1: SceGxmTextureFormat =
    469790720;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ABGR: SceGxmTextureFormat =
    486539264;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_ARGB: SceGxmTextureFormat =
    486543360;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_RGBA: SceGxmTextureFormat =
    486547456;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16S16S16_BGRA: SceGxmTextureFormat =
    486551552;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1BGR: SceGxmTextureFormat =
    486555648;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X16S16S16S16_1RGB: SceGxmTextureFormat =
    486559744;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_RGB1: SceGxmTextureFormat =
    486563840;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S16S16S16X16_BGR1: SceGxmTextureFormat =
    486567936;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32F32_00GR: SceGxmTextureFormat = 503320576;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32F32_GRRR: SceGxmTextureFormat = 503324672;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32F32_RGGG: SceGxmTextureFormat = 503328768;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32F32_GRGR: SceGxmTextureFormat = 503332864;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32F32_00RG: SceGxmTextureFormat = 503336960;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F32F32_GR: SceGxmTextureFormat = 503316480;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32U32_00GR: SceGxmTextureFormat = 520097792;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32U32_GRRR: SceGxmTextureFormat = 520101888;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32U32_RGGG: SceGxmTextureFormat = 520105984;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32U32_GRGR: SceGxmTextureFormat = 520110080;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32U32_00RG: SceGxmTextureFormat = 520114176;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U32U32_GR: SceGxmTextureFormat = 520093696;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_ABGR: SceGxmTextureFormat =
    2147483648;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRT2BPP_1BGR: SceGxmTextureFormat =
    2147500032;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_ABGR: SceGxmTextureFormat =
    2164260864;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRT4BPP_1BGR: SceGxmTextureFormat =
    2164277248;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_ABGR: SceGxmTextureFormat =
    2181038080;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP_1BGR: SceGxmTextureFormat =
    2181054464;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_ABGR: SceGxmTextureFormat =
    2197815296;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP_1BGR: SceGxmTextureFormat =
    2197831680;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC1_ABGR: SceGxmTextureFormat = 2231369728;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC1_1BGR: SceGxmTextureFormat = 2231386112;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC2_ABGR: SceGxmTextureFormat = 2248146944;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC2_1BGR: SceGxmTextureFormat = 2248163328;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC3_ABGR: SceGxmTextureFormat = 2264924160;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC3_1BGR: SceGxmTextureFormat = 2264940544;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_000R: SceGxmTextureFormat = 2281705472;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_111R: SceGxmTextureFormat = 2281709568;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_RRRR: SceGxmTextureFormat = 2281713664;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_0RRR: SceGxmTextureFormat = 2281717760;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_1RRR: SceGxmTextureFormat = 2281721856;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_R000: SceGxmTextureFormat = 2281725952;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_R111: SceGxmTextureFormat = 2281730048;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC4_R: SceGxmTextureFormat = 2281701376;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_000R: SceGxmTextureFormat = 2298482688;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_111R: SceGxmTextureFormat = 2298486784;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_RRRR: SceGxmTextureFormat = 2298490880;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_0RRR: SceGxmTextureFormat = 2298494976;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_1RRR: SceGxmTextureFormat = 2298499072;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_R000: SceGxmTextureFormat = 2298503168;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_R111: SceGxmTextureFormat = 2298507264;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC4_R: SceGxmTextureFormat = 2298478592;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC5_00GR: SceGxmTextureFormat = 2315259904;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC5_GRRR: SceGxmTextureFormat = 2315264000;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC5_RGGG: SceGxmTextureFormat = 2315268096;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC5_GRGR: SceGxmTextureFormat = 2315272192;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC5_00RG: SceGxmTextureFormat = 2315276288;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC5_GR: SceGxmTextureFormat = 2315255808;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC5_00GR: SceGxmTextureFormat = 2332037120;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC5_GRRR: SceGxmTextureFormat = 2332041216;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC5_RGGG: SceGxmTextureFormat = 2332045312;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC5_GRGR: SceGxmTextureFormat = 2332049408;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC5_00RG: SceGxmTextureFormat = 2332053504;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_SBC5_GR: SceGxmTextureFormat = 2332033024;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC0: SceGxmTextureFormat =
    2415919104;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC0: SceGxmTextureFormat =
    2415923200;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YUV420P2_CSC1: SceGxmTextureFormat =
    2415927296;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVU420P2_CSC1: SceGxmTextureFormat =
    2415931392;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC0: SceGxmTextureFormat =
    2432696320;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC0: SceGxmTextureFormat =
    2432700416;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YUV420P3_CSC1: SceGxmTextureFormat =
    2432704512;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVU420P3_CSC1: SceGxmTextureFormat =
    2432708608;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC0: SceGxmTextureFormat = 2449473536;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC0: SceGxmTextureFormat = 2449477632;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC0: SceGxmTextureFormat = 2449481728;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC0: SceGxmTextureFormat = 2449485824;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YUYV422_CSC1: SceGxmTextureFormat = 2449489920;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVYU422_CSC1: SceGxmTextureFormat = 2449494016;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UYVY422_CSC1: SceGxmTextureFormat = 2449498112;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_VYUY422_CSC1: SceGxmTextureFormat = 2449502208;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_ABGR: SceGxmTextureFormat = 2483027968;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_ARGB: SceGxmTextureFormat = 2483032064;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_RGBA: SceGxmTextureFormat = 2483036160;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_BGRA: SceGxmTextureFormat = 2483040256;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_1BGR: SceGxmTextureFormat = 2483044352;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_1RGB: SceGxmTextureFormat = 2483048448;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_RGB1: SceGxmTextureFormat = 2483052544;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P4_BGR1: SceGxmTextureFormat = 2483056640;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_ABGR: SceGxmTextureFormat = 2499805184;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_ARGB: SceGxmTextureFormat = 2499809280;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_RGBA: SceGxmTextureFormat = 2499813376;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_BGRA: SceGxmTextureFormat = 2499817472;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_1BGR: SceGxmTextureFormat = 2499821568;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_1RGB: SceGxmTextureFormat = 2499825664;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_RGB1: SceGxmTextureFormat = 2499829760;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_P8_BGR1: SceGxmTextureFormat = 2499833856;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8_BGR: SceGxmTextureFormat = 2550136832;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U8U8U8_RGB: SceGxmTextureFormat = 2550140928;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8_BGR: SceGxmTextureFormat = 2566914048;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_S8S8S8_RGB: SceGxmTextureFormat = 2566918144;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ABGR: SceGxmTextureFormat =
    2583691264;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_U2F10F10F10_ARGB: SceGxmTextureFormat =
    2583695360;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_RGBA: SceGxmTextureFormat =
    2583699456;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F10F10F10U2_BGRA: SceGxmTextureFormat =
    2583703552;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1BGR: SceGxmTextureFormat =
    2583707648;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_X2F10F10F10_1RGB: SceGxmTextureFormat =
    2583711744;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_RGB1: SceGxmTextureFormat =
    2583715840;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_F10F10F10X2_BGR1: SceGxmTextureFormat =
    2583719936;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_L8: SceGxmTextureFormat = 20480;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A8: SceGxmTextureFormat = 24576;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_R8: SceGxmTextureFormat = 4096;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A4R4G4B4: SceGxmTextureFormat = 33558528;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A1R5G5B5: SceGxmTextureFormat = 67112960;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_R5G6B5: SceGxmTextureFormat = 83890176;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A8L8: SceGxmTextureFormat = 117448704;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_L8A8: SceGxmTextureFormat = 117452800;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_G8R8: SceGxmTextureFormat = 117444608;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_L16: SceGxmTextureFormat = 151015424;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A16: SceGxmTextureFormat = 151019520;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_R16: SceGxmTextureFormat = 150999040;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_D16: SceGxmTextureFormat = 150994944;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_LF16: SceGxmTextureFormat = 184569856;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_AF16: SceGxmTextureFormat = 184573952;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_RF16: SceGxmTextureFormat = 184553472;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A8R8G8B8: SceGxmTextureFormat = 201330688;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_A8B8G8R8: SceGxmTextureFormat = 201326592;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_AF16LF16: SceGxmTextureFormat = 285220864;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_LF16AF16: SceGxmTextureFormat = 285224960;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_GF16RF16: SceGxmTextureFormat = 285216768;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_LF32M: SceGxmTextureFormat = 318787584;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_AF32M: SceGxmTextureFormat = 318791680;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_RF32M: SceGxmTextureFormat = 318771200;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_DF32M: SceGxmTextureFormat = 318767104;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_VYUY: SceGxmTextureFormat = 2449485824;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_YVYU: SceGxmTextureFormat = 2449477632;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC1: SceGxmTextureFormat = 2231369728;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC2: SceGxmTextureFormat = 2248146944;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_UBC3: SceGxmTextureFormat = 2264924160;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRT2BPP: SceGxmTextureFormat = 2147483648;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRT4BPP: SceGxmTextureFormat = 2164260864;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRTII2BPP: SceGxmTextureFormat = 2181038080;
pub const SceGxmTextureFormat_SCE_GXM_TEXTURE_FORMAT_PVRTII4BPP: SceGxmTextureFormat = 2197815296;
pub type SceGxmTextureFormat = ::std::os::raw::c_uint;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_SWIZZLED: SceGxmTextureType = 0;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_CUBE: SceGxmTextureType = 1073741824;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_LINEAR: SceGxmTextureType = 1610612736;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_TILED: SceGxmTextureType = 2147483648;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_SWIZZLED_ARBITRARY: SceGxmTextureType = 2684354560;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_LINEAR_STRIDED: SceGxmTextureType = 3221225472;
pub const SceGxmTextureType_SCE_GXM_TEXTURE_CUBE_ARBITRARY: SceGxmTextureType = 3758096384;
pub type SceGxmTextureType = ::std::os::raw::c_uint;
pub const SceGxmTextureFilter_SCE_GXM_TEXTURE_FILTER_POINT: SceGxmTextureFilter = 0;
pub const SceGxmTextureFilter_SCE_GXM_TEXTURE_FILTER_LINEAR: SceGxmTextureFilter = 1;
pub const SceGxmTextureFilter_SCE_GXM_TEXTURE_FILTER_MIPMAP_LINEAR: SceGxmTextureFilter = 2;
pub const SceGxmTextureFilter_SCE_GXM_TEXTURE_FILTER_MIPMAP_POINT: SceGxmTextureFilter = 3;
pub type SceGxmTextureFilter = ::std::os::raw::c_uint;
pub const SceGxmTextureMipFilter_SCE_GXM_TEXTURE_MIP_FILTER_DISABLED: SceGxmTextureMipFilter = 0;
pub const SceGxmTextureMipFilter_SCE_GXM_TEXTURE_MIP_FILTER_ENABLED: SceGxmTextureMipFilter = 512;
pub type SceGxmTextureMipFilter = ::std::os::raw::c_uint;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_REPEAT: SceGxmTextureAddrMode = 0;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_MIRROR: SceGxmTextureAddrMode = 1;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_CLAMP: SceGxmTextureAddrMode = 2;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_MIRROR_CLAMP: SceGxmTextureAddrMode = 3;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_REPEAT_IGNORE_BORDER: SceGxmTextureAddrMode =
    4;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_CLAMP_FULL_BORDER: SceGxmTextureAddrMode = 5;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_CLAMP_IGNORE_BORDER: SceGxmTextureAddrMode = 6;
pub const SceGxmTextureAddrMode_SCE_GXM_TEXTURE_ADDR_CLAMP_HALF_BORDER: SceGxmTextureAddrMode = 7;
pub type SceGxmTextureAddrMode = ::std::os::raw::c_uint;
pub const SceGxmTextureGammaMode_SCE_GXM_TEXTURE_GAMMA_NONE: SceGxmTextureGammaMode = 0;
pub const SceGxmTextureGammaMode_SCE_GXM_TEXTURE_GAMMA_R: SceGxmTextureGammaMode = 134217728;
pub const SceGxmTextureGammaMode_SCE_GXM_TEXTURE_GAMMA_GR: SceGxmTextureGammaMode = 402653184;
pub const SceGxmTextureGammaMode_SCE_GXM_TEXTURE_GAMMA_BGR: SceGxmTextureGammaMode = 134217728;
pub type SceGxmTextureGammaMode = ::std::os::raw::c_uint;
pub const SceGxmTextureNormalizeMode_SCE_GXM_TEXTURE_NORMALIZE_DISABLED:
    SceGxmTextureNormalizeMode = 0;
pub const SceGxmTextureNormalizeMode_SCE_GXM_TEXTURE_NORMALIZE_ENABLED: SceGxmTextureNormalizeMode =
    2147483648;
pub type SceGxmTextureNormalizeMode = ::std::os::raw::c_uint;
pub const SceGxmIndexFormat_SCE_GXM_INDEX_FORMAT_U16: SceGxmIndexFormat = 0;
pub const SceGxmIndexFormat_SCE_GXM_INDEX_FORMAT_U32: SceGxmIndexFormat = 16777216;
pub type SceGxmIndexFormat = ::std::os::raw::c_uint;
pub const SceGxmIndexSource_SCE_GXM_INDEX_SOURCE_INDEX_16BIT: SceGxmIndexSource = 0;
pub const SceGxmIndexSource_SCE_GXM_INDEX_SOURCE_INDEX_32BIT: SceGxmIndexSource = 1;
pub const SceGxmIndexSource_SCE_GXM_INDEX_SOURCE_INSTANCE_16BIT: SceGxmIndexSource = 2;
pub const SceGxmIndexSource_SCE_GXM_INDEX_SOURCE_INSTANCE_32BIT: SceGxmIndexSource = 3;
pub type SceGxmIndexSource = ::std::os::raw::c_uint;
pub const SceGxmFragmentProgramMode_SCE_GXM_FRAGMENT_PROGRAM_DISABLED: SceGxmFragmentProgramMode =
    2097152;
pub const SceGxmFragmentProgramMode_SCE_GXM_FRAGMENT_PROGRAM_ENABLED: SceGxmFragmentProgramMode = 0;
pub type SceGxmFragmentProgramMode = ::std::os::raw::c_uint;
pub const SceGxmDepthWriteMode_SCE_GXM_DEPTH_WRITE_DISABLED: SceGxmDepthWriteMode = 1048576;
pub const SceGxmDepthWriteMode_SCE_GXM_DEPTH_WRITE_ENABLED: SceGxmDepthWriteMode = 0;
pub type SceGxmDepthWriteMode = ::std::os::raw::c_uint;
pub const SceGxmLineFillLastPixelMode_SCE_GXM_LINE_FILL_LAST_PIXEL_DISABLED:
    SceGxmLineFillLastPixelMode = 0;
pub const SceGxmLineFillLastPixelMode_SCE_GXM_LINE_FILL_LAST_PIXEL_ENABLED:
    SceGxmLineFillLastPixelMode = 524288;
pub type SceGxmLineFillLastPixelMode = ::std::os::raw::c_uint;
pub const SceGxmTwoSidedMode_SCE_GXM_TWO_SIDED_DISABLED: SceGxmTwoSidedMode = 0;
pub const SceGxmTwoSidedMode_SCE_GXM_TWO_SIDED_ENABLED: SceGxmTwoSidedMode = 2048;
pub type SceGxmTwoSidedMode = ::std::os::raw::c_uint;
pub const SceGxmWClampMode_SCE_GXM_WCLAMP_MODE_DISABLED: SceGxmWClampMode = 0;
pub const SceGxmWClampMode_SCE_GXM_WCLAMP_MODE_ENABLED: SceGxmWClampMode = 32768;
pub type SceGxmWClampMode = ::std::os::raw::c_uint;
pub const SceGxmViewportMode_SCE_GXM_VIEWPORT_DISABLED: SceGxmViewportMode = 65536;
pub const SceGxmViewportMode_SCE_GXM_VIEWPORT_ENABLED: SceGxmViewportMode = 0;
pub type SceGxmViewportMode = ::std::os::raw::c_uint;
pub const SceGxmWBufferMode_SCE_GXM_WBUFFER_DISABLED: SceGxmWBufferMode = 0;
pub const SceGxmWBufferMode_SCE_GXM_WBUFFER_ENABLED: SceGxmWBufferMode = 16384;
pub type SceGxmWBufferMode = ::std::os::raw::c_uint;
pub const SceGxmDepthStencilForceLoadMode_SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_DISABLED:
    SceGxmDepthStencilForceLoadMode = 0;
pub const SceGxmDepthStencilForceLoadMode_SCE_GXM_DEPTH_STENCIL_FORCE_LOAD_ENABLED:
    SceGxmDepthStencilForceLoadMode = 2;
pub type SceGxmDepthStencilForceLoadMode = ::std::os::raw::c_uint;
pub const SceGxmDepthStencilForceStoreMode_SCE_GXM_DEPTH_STENCIL_FORCE_STORE_DISABLED:
    SceGxmDepthStencilForceStoreMode = 0;
pub const SceGxmDepthStencilForceStoreMode_SCE_GXM_DEPTH_STENCIL_FORCE_STORE_ENABLED:
    SceGxmDepthStencilForceStoreMode = 4;
pub type SceGxmDepthStencilForceStoreMode = ::std::os::raw::c_uint;
pub const SceGxmSceneFlags_SCE_GXM_SCENE_FRAGMENT_SET_DEPENDENCY: SceGxmSceneFlags = 1;
pub const SceGxmSceneFlags_SCE_GXM_SCENE_VERTEX_WAIT_FOR_DEPENDENCY: SceGxmSceneFlags = 2;
pub const SceGxmSceneFlags_SCE_GXM_SCENE_FRAGMENT_TRANSFER_SYNC: SceGxmSceneFlags = 4;
pub const SceGxmSceneFlags_SCE_GXM_SCENE_VERTEX_TRANSFER_SYNC: SceGxmSceneFlags = 8;
pub type SceGxmSceneFlags = ::std::os::raw::c_uint;
pub const SceGxmMidSceneFlags_SCE_GXM_MIDSCENE_PRESERVE_DEFAULT_UNIFORM_BUFFERS:
    SceGxmMidSceneFlags = 1;
pub type SceGxmMidSceneFlags = ::std::os::raw::c_uint;
pub const SceGxmColorSurfaceScaleMode_SCE_GXM_COLOR_SURFACE_SCALE_NONE:
    SceGxmColorSurfaceScaleMode = 0;
pub const SceGxmColorSurfaceScaleMode_SCE_GXM_COLOR_SURFACE_SCALE_MSAA_DOWNSCALE:
    SceGxmColorSurfaceScaleMode = 1;
pub type SceGxmColorSurfaceScaleMode = ::std::os::raw::c_uint;
pub const SceGxmOutputRegisterSize_SCE_GXM_OUTPUT_REGISTER_SIZE_32BIT: SceGxmOutputRegisterSize = 0;
pub const SceGxmOutputRegisterSize_SCE_GXM_OUTPUT_REGISTER_SIZE_64BIT: SceGxmOutputRegisterSize = 1;
pub type SceGxmOutputRegisterSize = ::std::os::raw::c_uint;
pub const SceGxmVisibilityTestMode_SCE_GXM_VISIBILITY_TEST_DISABLED: SceGxmVisibilityTestMode = 0;
pub const SceGxmVisibilityTestMode_SCE_GXM_VISIBILITY_TEST_ENABLED: SceGxmVisibilityTestMode =
    16384;
pub type SceGxmVisibilityTestMode = ::std::os::raw::c_uint;
pub const SceGxmVisibilityTestOp_SCE_GXM_VISIBILITY_TEST_OP_INCREMENT: SceGxmVisibilityTestOp = 0;
pub const SceGxmVisibilityTestOp_SCE_GXM_VISIBILITY_TEST_OP_SET: SceGxmVisibilityTestOp = 262144;
pub type SceGxmVisibilityTestOp = ::std::os::raw::c_uint;
pub const SceGxmYuvProfile_SCE_GXM_YUV_PROFILE_BT601_STANDARD: SceGxmYuvProfile = 0;
pub const SceGxmYuvProfile_SCE_GXM_YUV_PROFILE_BT709_STANDARD: SceGxmYuvProfile = 1;
pub const SceGxmYuvProfile_SCE_GXM_YUV_PROFILE_BT601_FULL_RANGE: SceGxmYuvProfile = 2;
pub const SceGxmYuvProfile_SCE_GXM_YUV_PROFILE_BT709_FULL_RANGE: SceGxmYuvProfile = 3;
pub type SceGxmYuvProfile = ::std::os::raw::c_uint;
pub const SceGxmBlendFunc_SCE_GXM_BLEND_FUNC_NONE: SceGxmBlendFunc = 0;
pub const SceGxmBlendFunc_SCE_GXM_BLEND_FUNC_ADD: SceGxmBlendFunc = 1;
pub const SceGxmBlendFunc_SCE_GXM_BLEND_FUNC_SUBTRACT: SceGxmBlendFunc = 2;
pub const SceGxmBlendFunc_SCE_GXM_BLEND_FUNC_REVERSE_SUBTRACT: SceGxmBlendFunc = 3;
pub const SceGxmBlendFunc_SCE_GXM_BLEND_FUNC_MIN: SceGxmBlendFunc = 4;
pub const SceGxmBlendFunc_SCE_GXM_BLEND_FUNC_MAX: SceGxmBlendFunc = 5;
pub type SceGxmBlendFunc = ::std::os::raw::c_uint;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_ZERO: SceGxmBlendFactor = 0;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_ONE: SceGxmBlendFactor = 1;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_SRC_COLOR: SceGxmBlendFactor = 2;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: SceGxmBlendFactor = 3;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_SRC_ALPHA: SceGxmBlendFactor = 4;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: SceGxmBlendFactor = 5;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_DST_COLOR: SceGxmBlendFactor = 6;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_COLOR: SceGxmBlendFactor = 7;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_DST_ALPHA: SceGxmBlendFactor = 8;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: SceGxmBlendFactor = 9;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_SRC_ALPHA_SATURATE: SceGxmBlendFactor = 10;
pub const SceGxmBlendFactor_SCE_GXM_BLEND_FACTOR_DST_ALPHA_SATURATE: SceGxmBlendFactor = 11;
pub type SceGxmBlendFactor = ::std::os::raw::c_uint;
pub const SceGxmColorMask_SCE_GXM_COLOR_MASK_NONE: SceGxmColorMask = 0;
pub const SceGxmColorMask_SCE_GXM_COLOR_MASK_A: SceGxmColorMask = 1;
pub const SceGxmColorMask_SCE_GXM_COLOR_MASK_R: SceGxmColorMask = 2;
pub const SceGxmColorMask_SCE_GXM_COLOR_MASK_G: SceGxmColorMask = 4;
pub const SceGxmColorMask_SCE_GXM_COLOR_MASK_B: SceGxmColorMask = 8;
pub const SceGxmColorMask_SCE_GXM_COLOR_MASK_ALL: SceGxmColorMask = 15;
pub type SceGxmColorMask = ::std::os::raw::c_uint;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U8_R: SceGxmTransferFormat = 0;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U4U4U4U4_ABGR: SceGxmTransferFormat = 65536;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U1U5U5U5_ABGR: SceGxmTransferFormat = 131072;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U5U6U5_BGR: SceGxmTransferFormat = 196608;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U8U8_GR: SceGxmTransferFormat = 262144;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U8U8U8_BGR: SceGxmTransferFormat = 327680;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U8U8U8U8_ABGR: SceGxmTransferFormat = 393216;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_VYUY422: SceGxmTransferFormat = 458752;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_YVYU422: SceGxmTransferFormat = 524288;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_UYVY422: SceGxmTransferFormat = 589824;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_YUYV422: SceGxmTransferFormat = 655360;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_U2U10U10U10_ABGR: SceGxmTransferFormat =
    851968;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_RAW16: SceGxmTransferFormat = 983040;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_RAW32: SceGxmTransferFormat = 1114112;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_RAW64: SceGxmTransferFormat = 1179648;
pub const SceGxmTransferFormat_SCE_GXM_TRANSFER_FORMAT_RAW128: SceGxmTransferFormat = 1245184;
pub type SceGxmTransferFormat = ::std::os::raw::c_uint;
pub const SceGxmTransferFlags_SCE_GXM_TRANSFER_FRAGMENT_SYNC: SceGxmTransferFlags = 1;
pub const SceGxmTransferFlags_SCE_GXM_TRANSFER_VERTEX_SYNC: SceGxmTransferFlags = 2;
pub type SceGxmTransferFlags = ::std::os::raw::c_uint;
pub const SceGxmTransferColorKeyMode_SCE_GXM_TRANSFER_COLORKEY_NONE: SceGxmTransferColorKeyMode = 0;
pub const SceGxmTransferColorKeyMode_SCE_GXM_TRANSFER_COLORKEY_PASS: SceGxmTransferColorKeyMode = 1;
pub const SceGxmTransferColorKeyMode_SCE_GXM_TRANSFER_COLORKEY_REJECT: SceGxmTransferColorKeyMode =
    2;
pub type SceGxmTransferColorKeyMode = ::std::os::raw::c_uint;
pub const SceGxmTransferType_SCE_GXM_TRANSFER_LINEAR: SceGxmTransferType = 0;
pub const SceGxmTransferType_SCE_GXM_TRANSFER_TILED: SceGxmTransferType = 4194304;
pub const SceGxmTransferType_SCE_GXM_TRANSFER_SWIZZLED: SceGxmTransferType = 8388608;
pub type SceGxmTransferType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmBlendInfo {
    #[doc = "!< Color Mask (One of ::SceGxmColorMask)"]
    pub colorMask: u8,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
}
#[test]
fn bindgen_test_layout_SceGxmBlendInfo() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmBlendInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmBlendInfo>(),
        4usize,
        concat!("Size of: ", stringify!(SceGxmBlendInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmBlendInfo>(),
        1usize,
        concat!("Alignment of ", stringify!(SceGxmBlendInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorMask) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmBlendInfo),
            "::",
            stringify!(colorMask)
        )
    );
}
impl SceGxmBlendInfo {
    #[inline]
    pub fn colorFunc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_colorFunc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn alphaFunc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_alphaFunc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn colorSrc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_colorSrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn colorDst(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_colorDst(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn alphaSrc(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_alphaSrc(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn alphaDst(&self) -> u8 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u8) }
    }
    #[inline]
    pub fn set_alphaDst(&mut self, val: u8) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        colorFunc: u8,
        alphaFunc: u8,
        colorSrc: u8,
        colorDst: u8,
        alphaSrc: u8,
        alphaDst: u8,
    ) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let colorFunc: u8 = unsafe { ::std::mem::transmute(colorFunc) };
            colorFunc as u64
        });
        __bindgen_bitfield_unit.set(4usize, 4u8, {
            let alphaFunc: u8 = unsafe { ::std::mem::transmute(alphaFunc) };
            alphaFunc as u64
        });
        __bindgen_bitfield_unit.set(8usize, 4u8, {
            let colorSrc: u8 = unsafe { ::std::mem::transmute(colorSrc) };
            colorSrc as u64
        });
        __bindgen_bitfield_unit.set(12usize, 4u8, {
            let colorDst: u8 = unsafe { ::std::mem::transmute(colorDst) };
            colorDst as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let alphaSrc: u8 = unsafe { ::std::mem::transmute(alphaSrc) };
            alphaSrc as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let alphaDst: u8 = unsafe { ::std::mem::transmute(alphaDst) };
            alphaDst as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmRenderTarget {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmSyncObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmVertexAttribute {
    #[doc = "!< Vertex stream index"]
    pub streamIndex: u16,
    #[doc = "!< Offset for the stream data in bytes"]
    pub offset: u16,
    #[doc = "!< Stream data type (One of ::SceGxmAttributeFormat)"]
    pub format: u8,
    #[doc = "!< Number of components for the stream data"]
    pub componentCount: u8,
    #[doc = "!< The register index in the vertex shader to link stream to."]
    pub regIndex: u16,
}
#[test]
fn bindgen_test_layout_SceGxmVertexAttribute() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmVertexAttribute> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmVertexAttribute>(),
        8usize,
        concat!("Size of: ", stringify!(SceGxmVertexAttribute))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmVertexAttribute>(),
        2usize,
        concat!("Alignment of ", stringify!(SceGxmVertexAttribute))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).streamIndex) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexAttribute),
            "::",
            stringify!(streamIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexAttribute),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).format) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexAttribute),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).componentCount) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexAttribute),
            "::",
            stringify!(componentCount)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).regIndex) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexAttribute),
            "::",
            stringify!(regIndex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmVertexStream {
    pub stride: u16,
    pub indexSource: u16,
}
#[test]
fn bindgen_test_layout_SceGxmVertexStream() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmVertexStream> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmVertexStream>(),
        4usize,
        concat!("Size of: ", stringify!(SceGxmVertexStream))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmVertexStream>(),
        2usize,
        concat!("Alignment of ", stringify!(SceGxmVertexStream))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexStream),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indexSource) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmVertexStream),
            "::",
            stringify!(indexSource)
        )
    );
}
#[doc = "! Texture struct"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmTexture {
    pub __bindgen_anon_1: SceGxmTexture__bindgen_ty_1,
    pub __bindgen_anon_2: SceGxmTexture__bindgen_ty_2,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 8usize]>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceGxmTexture__bindgen_ty_1 {
    pub generic: SceGxmTexture__bindgen_ty_1__bindgen_ty_1,
    pub linear_strided: SceGxmTexture__bindgen_ty_1__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_1__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_SceGxmTexture__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(SceGxmTexture__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SceGxmTexture__bindgen_ty_1__bindgen_ty_1)
        )
    );
}
impl SceGxmTexture__bindgen_ty_1__bindgen_ty_1 {
    #[inline]
    pub fn unk0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unk0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stride_ext(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_stride_ext(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn vaddr_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_vaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn uaddr_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_uaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mip_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_mip_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn min_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_min_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn mag_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mag_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_unk1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mip_count(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_mip_count(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn lod_bias(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(21usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_lod_bias(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(21usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn gamma_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_gamma_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_unk2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn format0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_format0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unk0: u32,
        stride_ext: u32,
        vaddr_mode: u32,
        uaddr_mode: u32,
        mip_filter: u32,
        min_filter: u32,
        mag_filter: u32,
        unk1: u32,
        mip_count: u32,
        lod_bias: u32,
        gamma_mode: u32,
        unk2: u32,
        format0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let unk0: u32 = unsafe { ::std::mem::transmute(unk0) };
            unk0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let stride_ext: u32 = unsafe { ::std::mem::transmute(stride_ext) };
            stride_ext as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let vaddr_mode: u32 = unsafe { ::std::mem::transmute(vaddr_mode) };
            vaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let uaddr_mode: u32 = unsafe { ::std::mem::transmute(uaddr_mode) };
            uaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let mip_filter: u32 = unsafe { ::std::mem::transmute(mip_filter) };
            mip_filter as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let min_filter: u32 = unsafe { ::std::mem::transmute(min_filter) };
            min_filter as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let mag_filter: u32 = unsafe { ::std::mem::transmute(mag_filter) };
            mag_filter as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let unk1: u32 = unsafe { ::std::mem::transmute(unk1) };
            unk1 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 4u8, {
            let mip_count: u32 = unsafe { ::std::mem::transmute(mip_count) };
            mip_count as u64
        });
        __bindgen_bitfield_unit.set(21usize, 6u8, {
            let lod_bias: u32 = unsafe { ::std::mem::transmute(lod_bias) };
            lod_bias as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let gamma_mode: u32 = unsafe { ::std::mem::transmute(gamma_mode) };
            gamma_mode as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let unk2: u32 = unsafe { ::std::mem::transmute(unk2) };
            unk2 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let format0: u32 = unsafe { ::std::mem::transmute(format0) };
            format0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_1__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_SceGxmTexture__bindgen_ty_1__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(SceGxmTexture__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SceGxmTexture__bindgen_ty_1__bindgen_ty_2)
        )
    );
}
impl SceGxmTexture__bindgen_ty_1__bindgen_ty_2 {
    #[inline]
    pub fn unk0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_unk0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn stride_ext(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_stride_ext(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn vaddr_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_vaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn uaddr_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_uaddr_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stride_low(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_stride_low(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn mag_filter(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_mag_filter(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_unk1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn stride(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(17usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_stride(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(17usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn gamma_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_gamma_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn unk2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_unk2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn format0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_format0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        unk0: u32,
        stride_ext: u32,
        vaddr_mode: u32,
        uaddr_mode: u32,
        stride_low: u32,
        mag_filter: u32,
        unk1: u32,
        stride: u32,
        gamma_mode: u32,
        unk2: u32,
        format0: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let unk0: u32 = unsafe { ::std::mem::transmute(unk0) };
            unk0 as u64
        });
        __bindgen_bitfield_unit.set(1usize, 2u8, {
            let stride_ext: u32 = unsafe { ::std::mem::transmute(stride_ext) };
            stride_ext as u64
        });
        __bindgen_bitfield_unit.set(3usize, 3u8, {
            let vaddr_mode: u32 = unsafe { ::std::mem::transmute(vaddr_mode) };
            vaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 3u8, {
            let uaddr_mode: u32 = unsafe { ::std::mem::transmute(uaddr_mode) };
            uaddr_mode as u64
        });
        __bindgen_bitfield_unit.set(9usize, 3u8, {
            let stride_low: u32 = unsafe { ::std::mem::transmute(stride_low) };
            stride_low as u64
        });
        __bindgen_bitfield_unit.set(12usize, 2u8, {
            let mag_filter: u32 = unsafe { ::std::mem::transmute(mag_filter) };
            mag_filter as u64
        });
        __bindgen_bitfield_unit.set(14usize, 3u8, {
            let unk1: u32 = unsafe { ::std::mem::transmute(unk1) };
            unk1 as u64
        });
        __bindgen_bitfield_unit.set(17usize, 10u8, {
            let stride: u32 = unsafe { ::std::mem::transmute(stride) };
            stride as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let gamma_mode: u32 = unsafe { ::std::mem::transmute(gamma_mode) };
            gamma_mode as u64
        });
        __bindgen_bitfield_unit.set(29usize, 2u8, {
            let unk2: u32 = unsafe { ::std::mem::transmute(unk2) };
            unk2 as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let format0: u32 = unsafe { ::std::mem::transmute(format0) };
            format0 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_SceGxmTexture__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmTexture__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(SceGxmTexture__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmTexture__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmTexture__bindgen_ty_1),
            "::",
            stringify!(generic)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linear_strided) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmTexture__bindgen_ty_1),
            "::",
            stringify!(linear_strided)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SceGxmTexture__bindgen_ty_2 {
    pub generic2: SceGxmTexture__bindgen_ty_2__bindgen_ty_1,
    pub swizzled_cube: SceGxmTexture__bindgen_ty_2__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_2__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_SceGxmTexture__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(SceGxmTexture__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SceGxmTexture__bindgen_ty_2__bindgen_ty_1)
        )
    );
}
impl SceGxmTexture__bindgen_ty_2__bindgen_ty_1 {
    #[inline]
    pub fn height(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_height(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn width(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(12usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_width(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(12usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn base_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_base_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        height: u32,
        width: u32,
        base_format: u32,
        type_: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let height: u32 = unsafe { ::std::mem::transmute(height) };
            height as u64
        });
        __bindgen_bitfield_unit.set(12usize, 12u8, {
            let width: u32 = unsafe { ::std::mem::transmute(width) };
            width as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let base_format: u32 = unsafe { ::std::mem::transmute(base_format) };
            base_format as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmTexture__bindgen_ty_2__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_SceGxmTexture__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(SceGxmTexture__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture__bindgen_ty_2__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(SceGxmTexture__bindgen_ty_2__bindgen_ty_2)
        )
    );
}
impl SceGxmTexture__bindgen_ty_2__bindgen_ty_2 {
    #[inline]
    pub fn height_pot(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_height_pot(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_reserved0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn width_pot(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_width_pot(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(20usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_reserved1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(20usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn base_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(24usize, 5u8) as u32) }
    }
    #[inline]
    pub fn set_base_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(24usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn type_(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_type(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        height_pot: u32,
        reserved0: u32,
        width_pot: u32,
        reserved1: u32,
        base_format: u32,
        type_: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let height_pot: u32 = unsafe { ::std::mem::transmute(height_pot) };
            height_pot as u64
        });
        __bindgen_bitfield_unit.set(4usize, 12u8, {
            let reserved0: u32 = unsafe { ::std::mem::transmute(reserved0) };
            reserved0 as u64
        });
        __bindgen_bitfield_unit.set(16usize, 4u8, {
            let width_pot: u32 = unsafe { ::std::mem::transmute(width_pot) };
            width_pot as u64
        });
        __bindgen_bitfield_unit.set(20usize, 4u8, {
            let reserved1: u32 = unsafe { ::std::mem::transmute(reserved1) };
            reserved1 as u64
        });
        __bindgen_bitfield_unit.set(24usize, 5u8, {
            let base_format: u32 = unsafe { ::std::mem::transmute(base_format) };
            base_format as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let type_: u32 = unsafe { ::std::mem::transmute(type_) };
            type_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_SceGxmTexture__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmTexture__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(SceGxmTexture__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmTexture__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).generic2) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmTexture__bindgen_ty_2),
            "::",
            stringify!(generic2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).swizzled_cube) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmTexture__bindgen_ty_2),
            "::",
            stringify!(swizzled_cube)
        )
    );
}
#[test]
fn bindgen_test_layout_SceGxmTexture() {
    assert_eq!(
        ::std::mem::size_of::<SceGxmTexture>(),
        16usize,
        concat!("Size of: ", stringify!(SceGxmTexture))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmTexture>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmTexture))
    );
}
impl SceGxmTexture {
    #[inline]
    pub fn lod_min0(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lod_min0(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn data_addr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 30u8) as u32) }
    }
    #[inline]
    pub fn set_data_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn palette_addr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(32usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_palette_addr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(32usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn lod_min1(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(58usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_lod_min1(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(58usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn swizzle_format(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(60usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_swizzle_format(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(60usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn normalize_mode(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(63usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_normalize_mode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(63usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        lod_min0: u32,
        data_addr: u32,
        palette_addr: u32,
        lod_min1: u32,
        swizzle_format: u32,
        normalize_mode: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 2u8, {
            let lod_min0: u32 = unsafe { ::std::mem::transmute(lod_min0) };
            lod_min0 as u64
        });
        __bindgen_bitfield_unit.set(2usize, 30u8, {
            let data_addr: u32 = unsafe { ::std::mem::transmute(data_addr) };
            data_addr as u64
        });
        __bindgen_bitfield_unit.set(32usize, 26u8, {
            let palette_addr: u32 = unsafe { ::std::mem::transmute(palette_addr) };
            palette_addr as u64
        });
        __bindgen_bitfield_unit.set(58usize, 2u8, {
            let lod_min1: u32 = unsafe { ::std::mem::transmute(lod_min1) };
            lod_min1 as u64
        });
        __bindgen_bitfield_unit.set(60usize, 3u8, {
            let swizzle_format: u32 = unsafe { ::std::mem::transmute(swizzle_format) };
            swizzle_format as u64
        });
        __bindgen_bitfield_unit.set(63usize, 1u8, {
            let normalize_mode: u32 = unsafe { ::std::mem::transmute(normalize_mode) };
            normalize_mode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmCommandList {
    pub words: [u32; 8usize],
}
#[test]
fn bindgen_test_layout_SceGxmCommandList() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmCommandList> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmCommandList>(),
        32usize,
        concat!("Size of: ", stringify!(SceGxmCommandList))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmCommandList>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmCommandList))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).words) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmCommandList),
            "::",
            stringify!(words)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SceGxmColorSurface {
    pub pbeSidebandWord: ::std::os::raw::c_uint,
    pub pbeEmitWords: [::std::os::raw::c_uint; 6usize],
    pub outputRegisterSize: ::std::os::raw::c_uint,
    pub backgroundTex: SceGxmTexture,
}
#[test]
fn bindgen_test_layout_SceGxmColorSurface() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmColorSurface> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmColorSurface>(),
        48usize,
        concat!("Size of: ", stringify!(SceGxmColorSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmColorSurface>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmColorSurface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbeSidebandWord) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmColorSurface),
            "::",
            stringify!(pbeSidebandWord)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pbeEmitWords) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmColorSurface),
            "::",
            stringify!(pbeEmitWords)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).outputRegisterSize) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmColorSurface),
            "::",
            stringify!(outputRegisterSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backgroundTex) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmColorSurface),
            "::",
            stringify!(backgroundTex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmDepthStencilSurface {
    pub zlsControl: ::std::os::raw::c_uint,
    pub depthData: *mut ::std::os::raw::c_void,
    pub stencilData: *mut ::std::os::raw::c_void,
    pub backgroundDepth: f32,
    pub backgroundControl: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_SceGxmDepthStencilSurface() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmDepthStencilSurface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmDepthStencilSurface>(),
        32usize,
        concat!("Size of: ", stringify!(SceGxmDepthStencilSurface))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmDepthStencilSurface>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmDepthStencilSurface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zlsControl) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDepthStencilSurface),
            "::",
            stringify!(zlsControl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).depthData) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDepthStencilSurface),
            "::",
            stringify!(depthData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stencilData) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDepthStencilSurface),
            "::",
            stringify!(stencilData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backgroundDepth) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDepthStencilSurface),
            "::",
            stringify!(backgroundDepth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backgroundControl) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDepthStencilSurface),
            "::",
            stringify!(backgroundControl)
        )
    );
}
#[doc = "! Represents an auxiliary surface"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmAuxiliarySurface {
    #[doc = "!< Format of auxiliary surface data from SceGxmColorFormat"]
    pub colorFormat: u32,
    #[doc = "!< Memory layout of the surface data from SceGxmColorSurfaceType"]
    pub type_: u32,
    #[doc = "!< Surface width"]
    pub width: u32,
    #[doc = "!< Surface height"]
    pub height: u32,
    #[doc = "!< Surface stride in bytes"]
    pub stride: u32,
    #[doc = "!< A pointer to the surface data"]
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_SceGxmAuxiliarySurface() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmAuxiliarySurface> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmAuxiliarySurface>(),
        32usize,
        concat!("Size of: ", stringify!(SceGxmAuxiliarySurface))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmAuxiliarySurface>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmAuxiliarySurface))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).colorFormat) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmAuxiliarySurface),
            "::",
            stringify!(colorFormat)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmAuxiliarySurface),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmAuxiliarySurface),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmAuxiliarySurface),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stride) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmAuxiliarySurface),
            "::",
            stringify!(stride)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmAuxiliarySurface),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmNotification {
    pub address: *mut ::std::os::raw::c_uint,
    pub value: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_SceGxmNotification() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmNotification> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmNotification>(),
        16usize,
        concat!("Size of: ", stringify!(SceGxmNotification))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmNotification>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmNotification))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).address) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmNotification),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmNotification),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmValidRegion {
    pub xMax: u32,
    pub yMax: u32,
}
#[test]
fn bindgen_test_layout_SceGxmValidRegion() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmValidRegion> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmValidRegion>(),
        8usize,
        concat!("Size of: ", stringify!(SceGxmValidRegion))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmValidRegion>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmValidRegion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xMax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmValidRegion),
            "::",
            stringify!(xMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yMax) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmValidRegion),
            "::",
            stringify!(yMax)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmContext {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmContextParams {
    pub hostMem: *mut ::std::os::raw::c_void,
    pub hostMemSize: SceSize,
    pub vdmRingBufferMem: *mut ::std::os::raw::c_void,
    pub vdmRingBufferMemSize: SceSize,
    pub vertexRingBufferMem: *mut ::std::os::raw::c_void,
    pub vertexRingBufferMemSize: SceSize,
    pub fragmentRingBufferMem: *mut ::std::os::raw::c_void,
    pub fragmentRingBufferMemSize: SceSize,
    pub fragmentUsseRingBufferMem: *mut ::std::os::raw::c_void,
    pub fragmentUsseRingBufferMemSize: SceSize,
    pub fragmentUsseRingBufferOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_SceGxmContextParams() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmContextParams> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmContextParams>(),
        80usize,
        concat!("Size of: ", stringify!(SceGxmContextParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmContextParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmContextParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostMem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(hostMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostMemSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(hostMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdmRingBufferMem) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(vdmRingBufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdmRingBufferMemSize) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(vdmRingBufferMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexRingBufferMem) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(vertexRingBufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexRingBufferMemSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(vertexRingBufferMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentRingBufferMem) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(fragmentRingBufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentRingBufferMemSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(fragmentRingBufferMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentUsseRingBufferMem) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(fragmentUsseRingBufferMem)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentUsseRingBufferMemSize) as usize - ptr as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(fragmentUsseRingBufferMemSize)
        )
    );
    assert_eq!(
        unsafe {
            ::std::ptr::addr_of!((*ptr).fragmentUsseRingBufferOffset) as usize - ptr as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmContextParams),
            "::",
            stringify!(fragmentUsseRingBufferOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmDeferredContextParams {
    pub hostMem: *mut ::std::os::raw::c_void,
    pub hostMemSize: SceSize,
    pub vdmCallback: ::std::option::Option<
        unsafe extern "C" fn(
            args: *mut ::std::os::raw::c_void,
            requestedSize: SceSize,
            size: *mut SceSize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub vertexCallback: ::std::option::Option<
        unsafe extern "C" fn(
            args: *mut ::std::os::raw::c_void,
            requestedSize: SceSize,
            size: *mut SceSize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub fragmentCallback: ::std::option::Option<
        unsafe extern "C" fn(
            args: *mut ::std::os::raw::c_void,
            requestedSize: SceSize,
            size: *mut SceSize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub callbackData: *mut ::std::os::raw::c_void,
    pub vdmRingBufferMem: *mut ::std::os::raw::c_void,
    pub vdmRingBufferMemSize: SceSize,
    pub vertexRingBufferMem: *mut ::std::os::raw::c_void,
    pub vertexRingBufferMemSize: SceSize,
    pub fragmentRingBufferMem: *mut ::std::os::raw::c_void,
    pub fragmentRingBufferMemSize: SceSize,
}
#[test]
fn bindgen_test_layout_SceGxmDeferredContextParams() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmDeferredContextParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmDeferredContextParams>(),
        96usize,
        concat!("Size of: ", stringify!(SceGxmDeferredContextParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmDeferredContextParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmDeferredContextParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostMem) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(hostMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostMemSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(hostMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdmCallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(vdmCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(vertexCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(fragmentCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).callbackData) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(callbackData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdmRingBufferMem) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(vdmRingBufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vdmRingBufferMemSize) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(vdmRingBufferMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexRingBufferMem) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(vertexRingBufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexRingBufferMemSize) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(vertexRingBufferMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentRingBufferMem) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(fragmentRingBufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentRingBufferMemSize) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmDeferredContextParams),
            "::",
            stringify!(fragmentRingBufferMemSize)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmVertexProgram {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmFragmentProgram {
    _unused: [u8; 0],
}
pub const SceGxmPrecomputedWordCount_SCE_GXM_PRECOMPUTED_VERTEX_STATE_WORD_COUNT:
    SceGxmPrecomputedWordCount = 7;
pub const SceGxmPrecomputedWordCount_SCE_GXM_PRECOMPUTED_FRAGMENT_STATE_WORD_COUNT:
    SceGxmPrecomputedWordCount = 9;
pub const SceGxmPrecomputedWordCount_SCE_GXM_PRECOMPUTED_DRAW_WORD_COUNT:
    SceGxmPrecomputedWordCount = 11;
pub type SceGxmPrecomputedWordCount = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmPrecomputedVertexState {
    pub data: [::std::os::raw::c_uint; 7usize],
}
#[test]
fn bindgen_test_layout_SceGxmPrecomputedVertexState() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmPrecomputedVertexState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmPrecomputedVertexState>(),
        28usize,
        concat!("Size of: ", stringify!(SceGxmPrecomputedVertexState))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmPrecomputedVertexState>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmPrecomputedVertexState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmPrecomputedVertexState),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmPrecomputedFragmentState {
    pub data: [::std::os::raw::c_uint; 9usize],
}
#[test]
fn bindgen_test_layout_SceGxmPrecomputedFragmentState() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmPrecomputedFragmentState> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmPrecomputedFragmentState>(),
        36usize,
        concat!("Size of: ", stringify!(SceGxmPrecomputedFragmentState))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmPrecomputedFragmentState>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmPrecomputedFragmentState))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmPrecomputedFragmentState),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmPrecomputedDraw {
    pub data: [::std::os::raw::c_uint; 11usize],
}
#[test]
fn bindgen_test_layout_SceGxmPrecomputedDraw() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmPrecomputedDraw> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmPrecomputedDraw>(),
        44usize,
        concat!("Size of: ", stringify!(SceGxmPrecomputedDraw))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmPrecomputedDraw>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmPrecomputedDraw))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmPrecomputedDraw),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmProgram {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmProgramParameter {
    _unused: [u8; 0],
}
pub const SceGxmProgramType_SCE_GXM_VERTEX_PROGRAM: SceGxmProgramType = 0;
pub const SceGxmProgramType_SCE_GXM_FRAGMENT_PROGRAM: SceGxmProgramType = 1;
pub type SceGxmProgramType = ::std::os::raw::c_uint;
pub const SceGxmParameterCategory_SCE_GXM_PARAMETER_CATEGORY_ATTRIBUTE: SceGxmParameterCategory = 0;
pub const SceGxmParameterCategory_SCE_GXM_PARAMETER_CATEGORY_UNIFORM: SceGxmParameterCategory = 1;
pub const SceGxmParameterCategory_SCE_GXM_PARAMETER_CATEGORY_SAMPLER: SceGxmParameterCategory = 2;
pub const SceGxmParameterCategory_SCE_GXM_PARAMETER_CATEGORY_AUXILIARY_SURFACE:
    SceGxmParameterCategory = 3;
pub const SceGxmParameterCategory_SCE_GXM_PARAMETER_CATEGORY_UNIFORM_BUFFER:
    SceGxmParameterCategory = 4;
pub type SceGxmParameterCategory = ::std::os::raw::c_uint;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_F32: SceGxmParameterType = 0;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_F16: SceGxmParameterType = 1;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_C10: SceGxmParameterType = 2;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_U32: SceGxmParameterType = 3;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_S32: SceGxmParameterType = 4;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_U16: SceGxmParameterType = 5;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_S16: SceGxmParameterType = 6;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_U8: SceGxmParameterType = 7;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_S8: SceGxmParameterType = 8;
pub const SceGxmParameterType_SCE_GXM_PARAMETER_TYPE_AGGREGATE: SceGxmParameterType = 9;
pub type SceGxmParameterType = ::std::os::raw::c_uint;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_NONE: SceGxmParameterSemantic = 0;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_ATTR: SceGxmParameterSemantic = 1;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_BCOL: SceGxmParameterSemantic = 2;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_BINORMAL: SceGxmParameterSemantic = 3;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_BLENDINDICES: SceGxmParameterSemantic =
    4;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_BLENDWEIGHT: SceGxmParameterSemantic =
    5;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_COLOR: SceGxmParameterSemantic = 6;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_DIFFUSE: SceGxmParameterSemantic = 7;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_FOGCOORD: SceGxmParameterSemantic = 8;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_NORMAL: SceGxmParameterSemantic = 9;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_POINTSIZE: SceGxmParameterSemantic =
    10;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_POSITION: SceGxmParameterSemantic = 11;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_SPECULAR: SceGxmParameterSemantic = 12;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_TANGENT: SceGxmParameterSemantic = 13;
pub const SceGxmParameterSemantic_SCE_GXM_PARAMETER_SEMANTIC_TEXCOORD: SceGxmParameterSemantic = 14;
pub type SceGxmParameterSemantic = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmShaderPatcher {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmRegisteredProgram {
    _unused: [u8; 0],
}
pub type SceGxmShaderPatcherId = *mut SceGxmRegisteredProgram;
pub type SceGxmShaderPatcherHostAllocCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        size: SceSize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type SceGxmShaderPatcherHostFreeCallback = ::std::option::Option<
    unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, mem: *mut ::std::os::raw::c_void),
>;
pub type SceGxmShaderPatcherBufferAllocCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        size: SceSize,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type SceGxmShaderPatcherBufferFreeCallback = ::std::option::Option<
    unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, mem: *mut ::std::os::raw::c_void),
>;
pub type SceGxmShaderPatcherUsseAllocCallback = ::std::option::Option<
    unsafe extern "C" fn(
        userData: *mut ::std::os::raw::c_void,
        size: SceSize,
        usseOffset: *mut ::std::os::raw::c_uint,
    ) -> *mut ::std::os::raw::c_void,
>;
pub type SceGxmShaderPatcherUsseFreeCallback = ::std::option::Option<
    unsafe extern "C" fn(userData: *mut ::std::os::raw::c_void, mem: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmShaderPatcherParams {
    pub userData: *mut ::std::os::raw::c_void,
    pub hostAllocCallback: SceGxmShaderPatcherHostAllocCallback,
    pub hostFreeCallback: SceGxmShaderPatcherHostFreeCallback,
    pub bufferAllocCallback: SceGxmShaderPatcherBufferAllocCallback,
    pub bufferFreeCallback: SceGxmShaderPatcherBufferFreeCallback,
    pub bufferMem: *mut ::std::os::raw::c_void,
    pub bufferMemSize: SceSize,
    pub vertexUsseAllocCallback: SceGxmShaderPatcherUsseAllocCallback,
    pub vertexUsseFreeCallback: SceGxmShaderPatcherUsseFreeCallback,
    pub vertexUsseMem: *mut ::std::os::raw::c_void,
    pub vertexUsseMemSize: SceSize,
    pub vertexUsseOffset: ::std::os::raw::c_uint,
    pub fragmentUsseAllocCallback: SceGxmShaderPatcherUsseAllocCallback,
    pub fragmentUsseFreeCallback: SceGxmShaderPatcherUsseFreeCallback,
    pub fragmentUsseMem: *mut ::std::os::raw::c_void,
    pub fragmentUsseMemSize: SceSize,
    pub fragmentUsseOffset: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_SceGxmShaderPatcherParams() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmShaderPatcherParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmShaderPatcherParams>(),
        120usize,
        concat!("Size of: ", stringify!(SceGxmShaderPatcherParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmShaderPatcherParams>(),
        8usize,
        concat!("Alignment of ", stringify!(SceGxmShaderPatcherParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).userData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(userData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostAllocCallback) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(hostAllocCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).hostFreeCallback) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(hostFreeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferAllocCallback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(bufferAllocCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferFreeCallback) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(bufferFreeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferMem) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(bufferMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bufferMemSize) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(bufferMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUsseAllocCallback) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(vertexUsseAllocCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUsseFreeCallback) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(vertexUsseFreeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUsseMem) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(vertexUsseMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUsseMemSize) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(vertexUsseMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertexUsseOffset) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(vertexUsseOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentUsseAllocCallback) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(fragmentUsseAllocCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentUsseFreeCallback) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(fragmentUsseFreeCallback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentUsseMem) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(fragmentUsseMem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentUsseMemSize) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(fragmentUsseMemSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fragmentUsseOffset) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmShaderPatcherParams),
            "::",
            stringify!(fragmentUsseOffset)
        )
    );
}
pub const SceGxmRenderTargetFlags_SCE_GXM_RENDER_TARGET_CUSTOM_MULTISAMPLE_LOCATIONS:
    SceGxmRenderTargetFlags = 1;
pub type SceGxmRenderTargetFlags = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SceGxmRenderTargetParams {
    #[doc = "!< Bitwise combined flags from ::SceGxmRenderTargetFlags."]
    pub flags: u32,
    #[doc = "!< The width of the render target in pixels."]
    pub width: u16,
    #[doc = "!< The height of the render target in pixels."]
    pub height: u16,
    #[doc = "!< The expected number of scenes per frame, in the range [1,SCE_GXM_MAX_SCENES_PER_RENDERTARGET]."]
    pub scenesPerFrame: u16,
    #[doc = "!< A value from the #SceGxmMultisampleMode enum."]
    pub multisampleMode: u16,
    #[doc = "!< If enabled in the flags, the multisample locations to use."]
    pub multisampleLocations: u32,
    #[doc = "!< The uncached LPDDR memblock for the render target GPU data structures or SCE_UID_INVALID_UID to specify memory should be allocated in libgxm."]
    pub driverMemBlock: SceUID,
}
#[test]
fn bindgen_test_layout_SceGxmRenderTargetParams() {
    const UNINIT: ::std::mem::MaybeUninit<SceGxmRenderTargetParams> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<SceGxmRenderTargetParams>(),
        20usize,
        concat!("Size of: ", stringify!(SceGxmRenderTargetParams))
    );
    assert_eq!(
        ::std::mem::align_of::<SceGxmRenderTargetParams>(),
        4usize,
        concat!("Alignment of ", stringify!(SceGxmRenderTargetParams))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scenesPerFrame) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(scenesPerFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multisampleMode) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(multisampleMode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).multisampleLocations) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(multisampleLocations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).driverMemBlock) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(SceGxmRenderTargetParams),
            "::",
            stringify!(driverMemBlock)
        )
    );
}
extern "C" {
    pub fn sceGxmInitialize(params: *const SceGxmInitializeParams) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmVshInitialize(params: *const SceGxmInitializeParams) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTerminate() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmGetNotificationRegion() -> *mut ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmNotificationWait(notification: *const SceGxmNotification)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmMapMemory(
        base: *mut ::std::os::raw::c_void,
        size: SceSize,
        attr: SceGxmMemoryAttribFlags,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmUnmapMemory(base: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmMapVertexUsseMemory(
        base: *mut ::std::os::raw::c_void,
        size: SceSize,
        offset: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmUnmapVertexUsseMemory(base: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmMapFragmentUsseMemory(
        base: *mut ::std::os::raw::c_void,
        size: SceSize,
        offset: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmUnmapFragmentUsseMemory(
        base: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDisplayQueueAddEntry(
        oldBuffer: *mut SceGxmSyncObject,
        newBuffer: *mut SceGxmSyncObject,
        callbackData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDisplayQueueFinish() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSyncObjectCreate(syncObject: *mut *mut SceGxmSyncObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSyncObjectDestroy(syncObject: *mut SceGxmSyncObject) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmCreateContext(
        params: *const SceGxmContextParams,
        context: *mut *mut SceGxmContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDestroyContext(context: *mut SceGxmContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmCreateDeferredContext(
        params: *const SceGxmDeferredContextParams,
        context: *mut *mut SceGxmContext,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDestroyDeferredContext(context: *mut SceGxmContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetValidationEnable(context: *mut SceGxmContext, enable: SceBool);
}
extern "C" {
    pub fn sceGxmSetVertexProgram(
        context: *mut SceGxmContext,
        vertexProgram: *const SceGxmVertexProgram,
    );
}
extern "C" {
    pub fn sceGxmSetFragmentProgram(
        context: *mut SceGxmContext,
        fragmentProgram: *const SceGxmFragmentProgram,
    );
}
extern "C" {
    pub fn sceGxmReserveVertexDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmReserveFragmentDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetFragmentDefaultUniformBuffer(
        context: *mut SceGxmContext,
        uniformBuffer: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexStream(
        context: *mut SceGxmContext,
        streamIndex: ::std::os::raw::c_uint,
        streamData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexTexture(
        context: *mut SceGxmContext,
        textureIndex: ::std::os::raw::c_uint,
        texture: *const SceGxmTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetFragmentTexture(
        context: *mut SceGxmContext,
        textureIndex: ::std::os::raw::c_uint,
        texture: *const SceGxmTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetVertexUniformBuffer(
        context: *mut SceGxmContext,
        bufferIndex: ::std::os::raw::c_uint,
        bufferData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetFragmentUniformBuffer(
        context: *mut SceGxmContext,
        bufferIndex: ::std::os::raw::c_uint,
        bufferData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetAuxiliarySurface(
        context: *mut SceGxmContext,
        surfaceIndex: ::std::os::raw::c_uint,
        surface: *const SceGxmAuxiliarySurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetPrecomputedFragmentState(
        context: *mut SceGxmContext,
        precomputedState: *const SceGxmPrecomputedFragmentState,
    );
}
extern "C" {
    pub fn sceGxmSetPrecomputedVertexState(
        context: *mut SceGxmContext,
        precomputedState: *const SceGxmPrecomputedVertexState,
    );
}
extern "C" {
    pub fn sceGxmDrawPrecomputed(
        context: *mut SceGxmContext,
        precomputedDraw: *const SceGxmPrecomputedDraw,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDraw(
        context: *mut SceGxmContext,
        primType: SceGxmPrimitiveType,
        indexType: SceGxmIndexFormat,
        indexData: *const ::std::os::raw::c_void,
        indexCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDrawInstanced(
        context: *mut SceGxmContext,
        primType: SceGxmPrimitiveType,
        indexType: SceGxmIndexFormat,
        indexData: *const ::std::os::raw::c_void,
        indexCount: ::std::os::raw::c_uint,
        indexWrap: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetVisibilityBuffer(
        context: *mut SceGxmContext,
        bufferBase: *mut ::std::os::raw::c_void,
        stridePerCore: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmBeginScene(
        context: *mut SceGxmContext,
        flags: ::std::os::raw::c_uint,
        renderTarget: *const SceGxmRenderTarget,
        validRegion: *const SceGxmValidRegion,
        vertexSyncObject: *mut SceGxmSyncObject,
        fragmentSyncObject: *mut SceGxmSyncObject,
        colorSurface: *const SceGxmColorSurface,
        depthStencil: *const SceGxmDepthStencilSurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmMidSceneFlush(
        context: *mut SceGxmContext,
        flags: ::std::os::raw::c_uint,
        vertexSyncObject: *mut SceGxmSyncObject,
        vertexNotification: *const SceGxmNotification,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmEndScene(
        context: *mut SceGxmContext,
        vertexNotification: *const SceGxmNotification,
        fragmentNotification: *const SceGxmNotification,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmBeginCommandList(context: *mut SceGxmContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmExecuteCommandList(
        context: *mut SceGxmContext,
        list: *mut SceGxmCommandList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmEndCommandList(
        context: *mut SceGxmContext,
        list: *mut SceGxmCommandList,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetFrontDepthFunc(context: *mut SceGxmContext, depthFunc: SceGxmDepthFunc);
}
extern "C" {
    pub fn sceGxmSetBackDepthFunc(context: *mut SceGxmContext, depthFunc: SceGxmDepthFunc);
}
extern "C" {
    pub fn sceGxmSetFrontFragmentProgramEnable(
        context: *mut SceGxmContext,
        enable: SceGxmFragmentProgramMode,
    );
}
extern "C" {
    pub fn sceGxmSetBackFragmentProgramEnable(
        context: *mut SceGxmContext,
        enable: SceGxmFragmentProgramMode,
    );
}
extern "C" {
    pub fn sceGxmSetFrontDepthWriteEnable(
        context: *mut SceGxmContext,
        enable: SceGxmDepthWriteMode,
    );
}
extern "C" {
    pub fn sceGxmSetBackDepthWriteEnable(context: *mut SceGxmContext, enable: SceGxmDepthWriteMode);
}
extern "C" {
    pub fn sceGxmSetFrontLineFillLastPixelEnable(
        context: *mut SceGxmContext,
        enable: SceGxmLineFillLastPixelMode,
    );
}
extern "C" {
    pub fn sceGxmSetBackLineFillLastPixelEnable(
        context: *mut SceGxmContext,
        enable: SceGxmLineFillLastPixelMode,
    );
}
extern "C" {
    pub fn sceGxmSetFrontStencilRef(context: *mut SceGxmContext, sref: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sceGxmSetBackStencilRef(context: *mut SceGxmContext, sref: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sceGxmSetFrontPointLineWidth(context: *mut SceGxmContext, width: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sceGxmSetBackPointLineWidth(context: *mut SceGxmContext, width: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn sceGxmSetFrontPolygonMode(context: *mut SceGxmContext, mode: SceGxmPolygonMode);
}
extern "C" {
    pub fn sceGxmSetBackPolygonMode(context: *mut SceGxmContext, mode: SceGxmPolygonMode);
}
extern "C" {
    pub fn sceGxmSetFrontStencilFunc(
        context: *mut SceGxmContext,
        func: SceGxmStencilFunc,
        stencilFail: SceGxmStencilOp,
        depthFail: SceGxmStencilOp,
        depthPass: SceGxmStencilOp,
        compareMask: ::std::os::raw::c_uchar,
        writeMask: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn sceGxmSetBackStencilFunc(
        context: *mut SceGxmContext,
        func: SceGxmStencilFunc,
        stencilFail: SceGxmStencilOp,
        depthFail: SceGxmStencilOp,
        depthPass: SceGxmStencilOp,
        compareMask: ::std::os::raw::c_uchar,
        writeMask: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn sceGxmSetFrontDepthBias(
        context: *mut SceGxmContext,
        factor: ::std::os::raw::c_int,
        units: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sceGxmSetBackDepthBias(
        context: *mut SceGxmContext,
        factor: ::std::os::raw::c_int,
        units: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn sceGxmSetTwoSidedEnable(context: *mut SceGxmContext, enable: SceGxmTwoSidedMode);
}
extern "C" {
    pub fn sceGxmSetViewport(
        context: *mut SceGxmContext,
        xOffset: f32,
        xScale: f32,
        yOffset: f32,
        yScale: f32,
        zOffset: f32,
        zScale: f32,
    );
}
extern "C" {
    pub fn sceGxmSetWClampValue(context: *mut SceGxmContext, clampValue: f32);
}
extern "C" {
    pub fn sceGxmSetWClampEnable(context: *mut SceGxmContext, enable: SceGxmWClampMode);
}
extern "C" {
    pub fn sceGxmSetRegionClip(
        context: *mut SceGxmContext,
        mode: SceGxmRegionClipMode,
        xMin: ::std::os::raw::c_uint,
        yMin: ::std::os::raw::c_uint,
        xMax: ::std::os::raw::c_uint,
        yMax: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetDefaultRegionClipAndViewport(
        context: *mut SceGxmContext,
        xMax: ::std::os::raw::c_uint,
        yMax: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetCullMode(context: *mut SceGxmContext, mode: SceGxmCullMode);
}
extern "C" {
    pub fn sceGxmSetViewportEnable(context: *mut SceGxmContext, enable: SceGxmViewportMode);
}
extern "C" {
    pub fn sceGxmSetWBufferEnable(context: *mut SceGxmContext, enable: SceGxmWBufferMode);
}
extern "C" {
    pub fn sceGxmSetFrontVisibilityTestIndex(
        context: *mut SceGxmContext,
        index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetBackVisibilityTestIndex(
        context: *mut SceGxmContext,
        index: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmSetFrontVisibilityTestOp(context: *mut SceGxmContext, op: SceGxmVisibilityTestOp);
}
extern "C" {
    pub fn sceGxmSetBackVisibilityTestOp(context: *mut SceGxmContext, op: SceGxmVisibilityTestOp);
}
extern "C" {
    pub fn sceGxmSetFrontVisibilityTestEnable(
        context: *mut SceGxmContext,
        enable: SceGxmVisibilityTestMode,
    );
}
extern "C" {
    pub fn sceGxmSetBackVisibilityTestEnable(
        context: *mut SceGxmContext,
        enable: SceGxmVisibilityTestMode,
    );
}
extern "C" {
    pub fn sceGxmSetYuvProfile(
        context: *mut SceGxmContext,
        index: ::std::os::raw::c_uint,
        profile: SceGxmYuvProfile,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmFinish(context: *mut SceGxmContext);
}
extern "C" {
    pub fn sceGxmPushUserMarker(
        context: *mut SceGxmContext,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPopUserMarker(context: *mut SceGxmContext) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetUserMarker(
        context: *mut SceGxmContext,
        tag: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPadHeartbeat(
        displaySurface: *const SceGxmColorSurface,
        displaySyncObject: *mut SceGxmSyncObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPadTriggerGpuPaTrace() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceInit(
        surface: *mut SceGxmColorSurface,
        colorFormat: SceGxmColorFormat,
        surfaceType: SceGxmColorSurfaceType,
        scaleMode: SceGxmColorSurfaceScaleMode,
        outputRegisterSize: SceGxmOutputRegisterSize,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        strideInPixels: ::std::os::raw::c_uint,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceInitDisabled(
        surface: *mut SceGxmColorSurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceIsEnabled(surface: *const SceGxmColorSurface) -> SceBool;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetClip(
        surface: *const SceGxmColorSurface,
        xMin: *mut ::std::os::raw::c_uint,
        yMin: *mut ::std::os::raw::c_uint,
        xMax: *mut ::std::os::raw::c_uint,
        yMax: *mut ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmColorSurfaceSetClip(
        surface: *mut SceGxmColorSurface,
        xMin: ::std::os::raw::c_uint,
        yMin: ::std::os::raw::c_uint,
        xMax: ::std::os::raw::c_uint,
        yMax: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmColorSurfaceGetScaleMode(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceScaleMode;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetScaleMode(
        surface: *mut SceGxmColorSurface,
        scaleMode: SceGxmColorSurfaceScaleMode,
    );
}
extern "C" {
    pub fn sceGxmColorSurfaceGetData(
        surface: *const SceGxmColorSurface,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetData(
        surface: *mut SceGxmColorSurface,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetFormat(surface: *const SceGxmColorSurface) -> SceGxmColorFormat;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetFormat(
        surface: *mut SceGxmColorSurface,
        format: SceGxmColorFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetType(surface: *const SceGxmColorSurface) -> SceGxmColorSurfaceType;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetStrideInPixels(
        surface: *const SceGxmColorSurface,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceInit(
        surface: *mut SceGxmDepthStencilSurface,
        depthStencilFormat: SceGxmDepthStencilFormat,
        surfaceType: SceGxmDepthStencilSurfaceType,
        strideInSamples: ::std::os::raw::c_uint,
        depthData: *mut ::std::os::raw::c_void,
        stencilData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceInitDisabled(
        surface: *mut SceGxmDepthStencilSurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetBackgroundDepth(
        surface: *const SceGxmDepthStencilSurface,
    ) -> f32;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetBackgroundDepth(
        surface: *mut SceGxmDepthStencilSurface,
        backgroundDepth: f32,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetBackgroundStencil(
        surface: *const SceGxmDepthStencilSurface,
    ) -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetBackgroundStencil(
        surface: *mut SceGxmDepthStencilSurface,
        backgroundStencil: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceIsEnabled(surface: *const SceGxmDepthStencilSurface)
        -> SceBool;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetForceLoadMode(
        surface: *mut SceGxmDepthStencilSurface,
        forceLoad: SceGxmDepthStencilForceLoadMode,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetForceLoadMode(
        surface: *const SceGxmDepthStencilSurface,
    ) -> SceGxmDepthStencilForceLoadMode;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceSetForceStoreMode(
        surface: *mut SceGxmDepthStencilSurface,
        forceStore: SceGxmDepthStencilForceStoreMode,
    );
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetForceStoreMode(
        surface: *const SceGxmDepthStencilSurface,
    ) -> SceGxmDepthStencilForceStoreMode;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetGammaMode(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceGammaMode;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetGammaMode(
        surface: *mut SceGxmColorSurface,
        gammaMode: SceGxmColorSurfaceGammaMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmColorSurfaceGetDitherMode(
        surface: *const SceGxmColorSurface,
    ) -> SceGxmColorSurfaceDitherMode;
}
extern "C" {
    pub fn sceGxmColorSurfaceSetDitherMode(
        surface: *mut SceGxmColorSurface,
        ditherMode: SceGxmColorSurfaceDitherMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetFormat(
        surface: *const SceGxmDepthStencilSurface,
    ) -> SceGxmDepthStencilFormat;
}
extern "C" {
    pub fn sceGxmDepthStencilSurfaceGetStrideInSamples(
        surface: *const SceGxmDepthStencilSurface,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramCheck(program: *const SceGxmProgram) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmProgramGetSize(program: *const SceGxmProgram) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramGetType(program: *const SceGxmProgram) -> SceGxmProgramType;
}
extern "C" {
    pub fn sceGxmProgramIsDiscardUsed(program: *const SceGxmProgram) -> SceBool;
}
extern "C" {
    pub fn sceGxmProgramIsDepthReplaceUsed(program: *const SceGxmProgram) -> SceBool;
}
extern "C" {
    pub fn sceGxmProgramIsSpriteCoordUsed(program: *const SceGxmProgram) -> SceBool;
}
extern "C" {
    pub fn sceGxmProgramGetDefaultUniformBufferSize(
        program: *const SceGxmProgram,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramGetParameterCount(program: *const SceGxmProgram) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramGetParameter(
        program: *const SceGxmProgram,
        index: ::std::os::raw::c_uint,
    ) -> *const SceGxmProgramParameter;
}
extern "C" {
    pub fn sceGxmProgramFindParameterByName(
        program: *const SceGxmProgram,
        name: *const ::std::os::raw::c_char,
    ) -> *const SceGxmProgramParameter;
}
extern "C" {
    pub fn sceGxmProgramFindParameterBySemantic(
        program: *const SceGxmProgram,
        semantic: SceGxmParameterSemantic,
        index: ::std::os::raw::c_uint,
    ) -> *const SceGxmProgramParameter;
}
extern "C" {
    pub fn sceGxmProgramParameterGetIndex(
        program: *const SceGxmProgram,
        parameter: *const SceGxmProgramParameter,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetCategory(
        parameter: *const SceGxmProgramParameter,
    ) -> SceGxmParameterCategory;
}
extern "C" {
    pub fn sceGxmProgramParameterGetName(
        parameter: *const SceGxmProgramParameter,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sceGxmProgramParameterGetSemantic(
        parameter: *const SceGxmProgramParameter,
    ) -> SceGxmParameterSemantic;
}
extern "C" {
    pub fn sceGxmProgramParameterGetSemanticIndex(
        parameter: *const SceGxmProgramParameter,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetType(
        parameter: *const SceGxmProgramParameter,
    ) -> SceGxmParameterType;
}
extern "C" {
    pub fn sceGxmProgramParameterGetComponentCount(
        parameter: *const SceGxmProgramParameter,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetArraySize(
        parameter: *const SceGxmProgramParameter,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetResourceIndex(
        parameter: *const SceGxmProgramParameter,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterGetContainerIndex(
        parameter: *const SceGxmProgramParameter,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmProgramParameterIsSamplerCube(parameter: *const SceGxmProgramParameter)
        -> SceBool;
}
extern "C" {
    pub fn sceGxmFragmentProgramGetProgram(
        fragmentProgram: *const SceGxmFragmentProgram,
    ) -> *const SceGxmProgram;
}
extern "C" {
    pub fn sceGxmVertexProgramGetProgram(
        vertexProgram: *const SceGxmVertexProgram,
    ) -> *const SceGxmProgram;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreate(
        params: *const SceGxmShaderPatcherParams,
        shaderPatcher: *mut *mut SceGxmShaderPatcher,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherSetUserData(
        shaderPatcher: *mut SceGxmShaderPatcher,
        userData: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetUserData(
        shaderPatcher: *mut SceGxmShaderPatcher,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sceGxmShaderPatcherDestroy(
        shaderPatcher: *mut SceGxmShaderPatcher,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherRegisterProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programHeader: *const SceGxmProgram,
        programId: *mut SceGxmShaderPatcherId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherUnregisterProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherForceUnregisterProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetProgramFromId(
        programId: SceGxmShaderPatcherId,
    ) -> *const SceGxmProgram;
}
extern "C" {
    pub fn sceGxmShaderPatcherSetAuxiliarySurface(
        shaderPatcher: *mut SceGxmShaderPatcher,
        auxSurfaceIndex: ::std::os::raw::c_uint,
        auxSurface: *const SceGxmAuxiliarySurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreateVertexProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
        attributes: *const SceGxmVertexAttribute,
        attributeCount: ::std::os::raw::c_uint,
        streams: *const SceGxmVertexStream,
        streamCount: ::std::os::raw::c_uint,
        vertexProgram: *mut *mut SceGxmVertexProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreateFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        programId: SceGxmShaderPatcherId,
        outputFormat: SceGxmOutputRegisterFormat,
        multisampleMode: SceGxmMultisampleMode,
        blendInfo: *const SceGxmBlendInfo,
        vertexProgram: *const SceGxmProgram,
        fragmentProgram: *mut *mut SceGxmFragmentProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherCreateMaskUpdateFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut *mut SceGxmFragmentProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherAddRefVertexProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        vertexProgram: *mut SceGxmVertexProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherAddRefFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmFragmentProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetVertexProgramRefCount(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmVertexProgram,
        count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetFragmentProgramRefCount(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmFragmentProgram,
        count: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherReleaseVertexProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        vertexProgram: *mut SceGxmVertexProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherReleaseFragmentProgram(
        shaderPatcher: *mut SceGxmShaderPatcher,
        fragmentProgram: *mut SceGxmFragmentProgram,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetHostMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetBufferMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetVertexUsseMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmShaderPatcherGetFragmentUsseMemAllocated(
        shaderPatcher: *const SceGxmShaderPatcher,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmTextureInitSwizzled(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
        texFormat: SceGxmTextureFormat,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        mipCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitSwizzledArbitrary(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
        texFormat: SceGxmTextureFormat,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        mipCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitLinear(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
        texFormat: SceGxmTextureFormat,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        mipCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitLinearStrided(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
        texFormat: SceGxmTextureFormat,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        byteStride: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitTiled(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
        texFormat: SceGxmTextureFormat,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        mipCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureInitCube(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
        texFormat: SceGxmTextureFormat,
        width: ::std::os::raw::c_uint,
        height: ::std::os::raw::c_uint,
        mipCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetType(texture: *const SceGxmTexture) -> SceGxmTextureType;
}
extern "C" {
    pub fn sceGxmTextureValidate(texture: *const SceGxmTexture) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureSetMinFilter(
        texture: *mut SceGxmTexture,
        minFilter: SceGxmTextureFilter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMinFilter(texture: *const SceGxmTexture) -> SceGxmTextureFilter;
}
extern "C" {
    pub fn sceGxmTextureSetMagFilter(
        texture: *mut SceGxmTexture,
        magFilter: SceGxmTextureFilter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMagFilter(texture: *const SceGxmTexture) -> SceGxmTextureFilter;
}
extern "C" {
    pub fn sceGxmTextureSetMipFilter(
        texture: *mut SceGxmTexture,
        mipFilter: SceGxmTextureMipFilter,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMipFilter(texture: *const SceGxmTexture) -> SceGxmTextureMipFilter;
}
extern "C" {
    pub fn sceGxmTextureSetUAddrMode(
        texture: *mut SceGxmTexture,
        addrMode: SceGxmTextureAddrMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetUAddrMode(texture: *const SceGxmTexture) -> SceGxmTextureAddrMode;
}
extern "C" {
    pub fn sceGxmTextureSetVAddrMode(
        texture: *mut SceGxmTexture,
        addrMode: SceGxmTextureAddrMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetVAddrMode(texture: *const SceGxmTexture) -> SceGxmTextureAddrMode;
}
extern "C" {
    pub fn sceGxmTextureSetFormat(
        texture: *mut SceGxmTexture,
        texFormat: SceGxmTextureFormat,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetFormat(texture: *const SceGxmTexture) -> SceGxmTextureFormat;
}
extern "C" {
    pub fn sceGxmTextureSetLodBias(
        texture: *mut SceGxmTexture,
        bias: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetLodBias(texture: *const SceGxmTexture) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetStride(
        texture: *mut SceGxmTexture,
        byteStride: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetStride(texture: *const SceGxmTexture) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetWidth(
        texture: *mut SceGxmTexture,
        width: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetWidth(texture: *const SceGxmTexture) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetHeight(
        texture: *mut SceGxmTexture,
        height: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetHeight(texture: *const SceGxmTexture) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetData(
        texture: *mut SceGxmTexture,
        data: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetData(texture: *const SceGxmTexture) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sceGxmTextureSetMipmapCount(
        texture: *mut SceGxmTexture,
        mipCount: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetMipmapCount(texture: *const SceGxmTexture) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmTextureSetPalette(
        texture: *mut SceGxmTexture,
        paletteData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTextureGetPalette(texture: *const SceGxmTexture) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sceGxmTextureGetGammaMode(texture: *const SceGxmTexture) -> SceGxmTextureGammaMode;
}
extern "C" {
    pub fn sceGxmTextureSetGammaMode(
        texture: *mut SceGxmTexture,
        gammaMode: SceGxmTextureGammaMode,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmGetPrecomputedVertexStateSize(
        vertexProgram: *const SceGxmVertexProgram,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateInit(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        vertexProgram: *const SceGxmVertexProgram,
        memBlock: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetDefaultUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        defaultBuffer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateGetDefaultUniformBuffer(
        precomputedState: *const SceGxmPrecomputedVertexState,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetAllTextures(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        textures: *const SceGxmTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetTexture(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        textureIndex: ::std::os::raw::c_uint,
        texture: *const SceGxmTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetAllUniformBuffers(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        bufferDataArray: *const *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedVertexStateSetUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedVertexState,
        bufferIndex: ::std::os::raw::c_uint,
        bufferData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmGetPrecomputedFragmentStateSize(
        fragmentProgram: *const SceGxmFragmentProgram,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateInit(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        fragmentProgram: *const SceGxmFragmentProgram,
        memBlock: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        defaultBuffer: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer(
        precomputedState: *const SceGxmPrecomputedFragmentState,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetAllTextures(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        textureArray: *const SceGxmTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetTexture(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        textureIndex: ::std::os::raw::c_uint,
        texture: *const SceGxmTexture,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetAllUniformBuffers(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        bufferDataArray: *const *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetUniformBuffer(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        bufferIndex: ::std::os::raw::c_uint,
        bufferData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces(
        precomputedState: *mut SceGxmPrecomputedFragmentState,
        auxSurfaceArray: *const SceGxmAuxiliarySurface,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmGetPrecomputedDrawSize(
        vertexProgram: *const SceGxmVertexProgram,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawInit(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        vertexProgram: *const SceGxmVertexProgram,
        memBlock: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetAllVertexStreams(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        streamDataArray: *const *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetVertexStream(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        streamIndex: ::std::os::raw::c_uint,
        streamData: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetParams(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        primType: SceGxmPrimitiveType,
        indexType: SceGxmIndexFormat,
        indexData: *const ::std::os::raw::c_void,
        indexCount: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmPrecomputedDrawSetParamsInstanced(
        precomputedDraw: *mut SceGxmPrecomputedDraw,
        primType: SceGxmPrimitiveType,
        indexType: SceGxmIndexFormat,
        indexData: *const ::std::os::raw::c_void,
        indexCount: ::std::os::raw::c_uint,
        indexWrap: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sceGxmGetRenderTargetMemSize(
        params: *const SceGxmRenderTargetParams,
        driverMemSize: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmCreateRenderTarget(
        params: *const SceGxmRenderTargetParams,
        renderTarget: *mut *mut SceGxmRenderTarget,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmRenderTargetGetHostMem(
        renderTarget: *const SceGxmRenderTarget,
        hostMem: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmRenderTargetGetDriverMemBlock(
        renderTarget: *const SceGxmRenderTarget,
        driverMemBlock: *mut SceUID,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmDestroyRenderTarget(
        renderTarget: *mut SceGxmRenderTarget,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmSetUniformDataF(
        uniformBuffer: *mut ::std::os::raw::c_void,
        parameter: *const SceGxmProgramParameter,
        componentOffset: ::std::os::raw::c_uint,
        componentCount: ::std::os::raw::c_uint,
        sourceData: *const f32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTransferCopy(
        width: u32,
        height: u32,
        colorKeyValue: u32,
        colorKeyMask: u32,
        colorKeyMode: SceGxmTransferColorKeyMode,
        srcFormat: SceGxmTransferFormat,
        srcType: SceGxmTransferType,
        srcAddress: *const ::std::os::raw::c_void,
        srcX: u32,
        srcY: u32,
        srcStride: i32,
        destFormat: SceGxmTransferFormat,
        destType: SceGxmTransferType,
        destAddress: *mut ::std::os::raw::c_void,
        destX: u32,
        destY: u32,
        destStride: i32,
        syncObject: *mut SceGxmSyncObject,
        syncFlags: u32,
        notification: *const SceGxmNotification,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTransferDownscale(
        srcFormat: SceGxmTransferFormat,
        srcAddress: *const ::std::os::raw::c_void,
        srcX: ::std::os::raw::c_uint,
        srcY: ::std::os::raw::c_uint,
        srcWidth: ::std::os::raw::c_uint,
        srcHeight: ::std::os::raw::c_uint,
        srcStride: ::std::os::raw::c_int,
        destFormat: SceGxmTransferFormat,
        destAddress: *mut ::std::os::raw::c_void,
        destX: ::std::os::raw::c_uint,
        destY: ::std::os::raw::c_uint,
        destStride: ::std::os::raw::c_int,
        syncObject: *mut SceGxmSyncObject,
        syncFlags: ::std::os::raw::c_uint,
        notification: *const SceGxmNotification,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTransferFill(
        color: u32,
        destFormat: SceGxmTransferFormat,
        destAddress: *mut ::std::os::raw::c_void,
        destX: u32,
        destY: u32,
        destWidth: u32,
        destHeight: u32,
        destStride: i32,
        syncObject: *mut SceGxmSyncObject,
        syncFlags: u32,
        notification: *const SceGxmNotification,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sceGxmTransferFinish() -> ::std::os::raw::c_int;
}
#[doc = "!< Equivalent to O0"]
pub const shark_opt_SHARK_OPT_SLOW: shark_opt = 0;
#[doc = "!< Equivalent to O1"]
pub const shark_opt_SHARK_OPT_SAFE: shark_opt = 1;
#[doc = "!< Equivalent to O2"]
pub const shark_opt_SHARK_OPT_DEFAULT: shark_opt = 2;
#[doc = "!< Equivalent to O3"]
pub const shark_opt_SHARK_OPT_FAST: shark_opt = 3;
#[doc = "!< Equivalent to Ofast"]
pub const shark_opt_SHARK_OPT_UNSAFE: shark_opt = 4;
pub type shark_opt = ::std::os::raw::c_uint;
pub const shark_type_SHARK_VERTEX_SHADER: shark_type = 0;
pub const shark_type_SHARK_FRAGMENT_SHADER: shark_type = 1;
pub type shark_type = ::std::os::raw::c_uint;
pub const shark_log_level_SHARK_LOG_INFO: shark_log_level = 0;
pub const shark_log_level_SHARK_LOG_WARNING: shark_log_level = 1;
pub const shark_log_level_SHARK_LOG_ERROR: shark_log_level = 2;
pub type shark_log_level = ::std::os::raw::c_uint;
pub const shark_warn_level_SHARK_WARN_SILENT: shark_warn_level = 0;
pub const shark_warn_level_SHARK_WARN_LOW: shark_warn_level = 1;
pub const shark_warn_level_SHARK_WARN_MEDIUM: shark_warn_level = 2;
pub const shark_warn_level_SHARK_WARN_HIGH: shark_warn_level = 3;
pub const shark_warn_level_SHARK_WARN_MAX: shark_warn_level = 4;
pub type shark_warn_level = ::std::os::raw::c_uint;
extern "C" {
    pub fn shark_init(path: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shark_end();
}
extern "C" {
    pub fn shark_set_allocators(
        malloc_func: ::std::option::Option<
            unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void,
        >,
        free_func: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn shark_compile_shader_extended(
        src: *const ::std::os::raw::c_char,
        size: *mut u32,
        type_: shark_type,
        opt: shark_opt,
        use_fastmath: i32,
        use_fastprecision: i32,
        use_fastint: i32,
    ) -> *mut SceGxmProgram;
}
extern "C" {
    pub fn shark_compile_shader(
        src: *const ::std::os::raw::c_char,
        size: *mut u32,
        type_: shark_type,
    ) -> *mut SceGxmProgram;
}
extern "C" {
    pub fn shark_clear_output();
}
extern "C" {
    pub fn shark_get_internal_compile_output() -> *const SceShaccCgCompileOutput;
}
extern "C" {
    pub fn shark_install_log_cb(
        cb: ::std::option::Option<
            unsafe extern "C" fn(
                msg: *const ::std::os::raw::c_char,
                msg_level: shark_log_level,
                line: ::std::os::raw::c_int,
            ),
        >,
    );
}
extern "C" {
    pub fn shark_set_warnings_level(level: shark_warn_level);
}
extern "C" {
    pub fn glActiveTexture(texture: u32);
}
extern "C" {
    pub fn glAlphaFunc(func: u32, ref_: f32);
}
extern "C" {
    pub fn glAlphaFuncx(func: u32, ref_: i32);
}
extern "C" {
    pub fn glAttachShader(prog: u32, shad: u32);
}
extern "C" {
    pub fn glBegin(mode: u32);
}
extern "C" {
    pub fn glBindAttribLocation(program: u32, index: u32, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn glBindBuffer(target: u32, buffer: u32);
}
extern "C" {
    pub fn glBindFramebuffer(target: u32, framebuffer: u32);
}
extern "C" {
    pub fn glBindRenderbuffer(target: u32, renderbuffer: u32);
}
extern "C" {
    pub fn glBindSampler(unit: u32, smp: u32);
}
extern "C" {
    pub fn glBindTexture(target: u32, texture: u32);
}
extern "C" {
    pub fn glBindVertexArray(array: u32);
}
extern "C" {
    pub fn glBlendEquation(mode: u32);
}
extern "C" {
    pub fn glBlendEquationSeparate(modeRGB: u32, modeAlpha: u32);
}
extern "C" {
    pub fn glBlendFunc(sfactor: u32, dfactor: u32);
}
extern "C" {
    pub fn glBlendFuncSeparate(srcRGB: u32, dstRGB: u32, srcAlpha: u32, dstAlpha: u32);
}
extern "C" {
    pub fn glBufferData(target: u32, size: i32, data: *const ::std::os::raw::c_void, usage: u32);
}
extern "C" {
    pub fn glBufferSubData(
        target: u32,
        offset: i32,
        size: u32,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glCallList(list: u32);
}
extern "C" {
    pub fn glCallLists(n: i32, type_: u32, lists: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn glCheckFramebufferStatus(target: u32) -> u32;
}
extern "C" {
    pub fn glCheckNamedFramebufferStatus(target: u32, dummy: u32) -> u32;
}
extern "C" {
    pub fn glClear(mask: u32);
}
extern "C" {
    pub fn glClearColor(red: f32, green: f32, blue: f32, alpha: f32);
}
extern "C" {
    pub fn glClearColorx(red: i32, green: i32, blue: i32, alpha: i32);
}
extern "C" {
    pub fn glClearDepth(depth: f64);
}
extern "C" {
    pub fn glClearDepthf(depth: f32);
}
extern "C" {
    pub fn glClearDepthx(depth: i32);
}
extern "C" {
    pub fn glClearStencil(s: i32);
}
extern "C" {
    pub fn glClientActiveTexture(texture: u32);
}
extern "C" {
    pub fn glClipPlane(plane: u32, equation: *const f64);
}
extern "C" {
    pub fn glClipPlanef(plane: u32, equation: *const f32);
}
extern "C" {
    pub fn glClipPlanex(plane: u32, equation: *const i32);
}
extern "C" {
    pub fn glColor3f(red: f32, green: f32, blue: f32);
}
extern "C" {
    pub fn glColor3fv(v: *const f32);
}
extern "C" {
    pub fn glColor3ub(red: u8, green: u8, blue: u8);
}
extern "C" {
    pub fn glColor3ubv(v: *const u8);
}
extern "C" {
    pub fn glColor4f(red: f32, green: f32, blue: f32, alpha: f32);
}
extern "C" {
    pub fn glColor4fv(v: *const f32);
}
extern "C" {
    pub fn glColor4ub(red: u8, green: u8, blue: u8, alpha: u8);
}
extern "C" {
    pub fn glColor4ubv(v: *const u8);
}
extern "C" {
    pub fn glColor4x(red: i32, green: i32, blue: i32, alpha: i32);
}
extern "C" {
    pub fn glColorMask(red: u8, green: u8, blue: u8, alpha: u8);
}
extern "C" {
    pub fn glColorMaterial(face: u32, mode: u32);
}
extern "C" {
    pub fn glColorPointer(
        size: i32,
        type_: u32,
        stride: i32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glColorTable(
        target: u32,
        internalformat: u32,
        width: i32,
        format: u32,
        type_: u32,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glCompileShader(shader: u32);
}
extern "C" {
    pub fn glCompressedTexImage2D(
        target: u32,
        level: i32,
        internalformat: u32,
        width: i32,
        height: i32,
        border: i32,
        imageSize: i32,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glCopyTexImage1D(
        target: u32,
        level: i32,
        internalformat: u32,
        x: i32,
        y: i32,
        width: i32,
        border: i32,
    );
}
extern "C" {
    pub fn glCopyTexImage2D(
        target: u32,
        level: i32,
        internalformat: u32,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
        border: i32,
    );
}
extern "C" {
    pub fn glCopyTexSubImage1D(target: u32, level: i32, xoffset: i32, x: i32, y: i32, width: i32);
}
extern "C" {
    pub fn glCopyTexSubImage2D(
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        x: i32,
        y: i32,
        width: i32,
        height: i32,
    );
}
extern "C" {
    pub fn glCreateProgram() -> u32;
}
extern "C" {
    pub fn glCreateShader(shaderType: u32) -> u32;
}
extern "C" {
    pub fn glCullFace(mode: u32);
}
extern "C" {
    pub fn glDeleteBuffers(n: i32, gl_buffers: *const u32);
}
extern "C" {
    pub fn glDeleteFramebuffers(n: i32, framebuffers: *const u32);
}
extern "C" {
    pub fn glDeleteLists(list: u32, range: i32);
}
extern "C" {
    pub fn glDeleteProgram(prog: u32);
}
extern "C" {
    pub fn glDeleteRenderbuffers(n: i32, renderbuffers: *const u32);
}
extern "C" {
    pub fn glDeleteSamplers(n: i32, smp: *const u32);
}
extern "C" {
    pub fn glDeleteShader(shad: u32);
}
extern "C" {
    pub fn glDeleteTextures(n: i32, textures: *const u32);
}
extern "C" {
    pub fn glDeleteVertexArrays(n: i32, gl_arrays: *const u32);
}
extern "C" {
    pub fn glDepthFunc(func: u32);
}
extern "C" {
    pub fn glDepthMask(flag: u8);
}
extern "C" {
    pub fn glDepthRange(nearVal: f64, farVal: f64);
}
extern "C" {
    pub fn glDepthRangef(nearVal: f32, farVal: f32);
}
extern "C" {
    pub fn glDepthRangex(nearVal: i32, farVal: i32);
}
extern "C" {
    pub fn glDisable(cap: u32);
}
extern "C" {
    pub fn glDisableClientState(array: u32);
}
extern "C" {
    pub fn glDisableVertexAttribArray(index: u32);
}
extern "C" {
    pub fn glDrawArrays(mode: u32, first: i32, count: i32);
}
extern "C" {
    pub fn glDrawArraysInstanced(mode: u32, first: i32, count: i32, primcount: i32);
}
extern "C" {
    pub fn glDrawElements(
        mode: u32,
        count: i32,
        type_: u32,
        indices: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glDrawElementsBaseVertex(
        mode: u32,
        count: i32,
        type_: u32,
        gl_indices: *const ::std::os::raw::c_void,
        baseVertex: i32,
    );
}
extern "C" {
    pub fn glDrawElementsInstanced(
        mode: u32,
        count: i32,
        type_: u32,
        gl_indices: *const ::std::os::raw::c_void,
        primcount: i32,
    );
}
extern "C" {
    pub fn glDrawRangeElements(
        mode: u32,
        start: u32,
        end: u32,
        count: i32,
        type_: u32,
        indices: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glDrawRangeElementsBaseVertex(
        mode: u32,
        start: u32,
        end: u32,
        count: i32,
        type_: u32,
        indices: *mut ::std::os::raw::c_void,
        basevertex: i32,
    );
}
extern "C" {
    pub fn glEnable(cap: u32);
}
extern "C" {
    pub fn glEnableClientState(array: u32);
}
extern "C" {
    pub fn glEnableVertexAttribArray(index: u32);
}
extern "C" {
    pub fn glEnd();
}
extern "C" {
    pub fn glEndList();
}
extern "C" {
    pub fn glFinish();
}
extern "C" {
    pub fn glFlush();
}
extern "C" {
    pub fn glFlushMappedBufferRange(target: u32, offset: i32, length: u32);
}
extern "C" {
    pub fn glFogf(pname: u32, param: f32);
}
extern "C" {
    pub fn glFogfv(pname: u32, params: *const f32);
}
extern "C" {
    pub fn glFogi(pname: u32, param: i32);
}
extern "C" {
    pub fn glFogx(pname: u32, param: i32);
}
extern "C" {
    pub fn glFogxv(pname: u32, params: *const i32);
}
extern "C" {
    pub fn glFramebufferRenderbuffer(
        target: u32,
        attachment: u32,
        renderbuffertarget: u32,
        renderbuffer: u32,
    );
}
extern "C" {
    pub fn glFramebufferTexture(target: u32, attachment: u32, texture: u32, level: i32);
}
extern "C" {
    pub fn glFramebufferTexture2D(
        target: u32,
        attachment: u32,
        textarget: u32,
        texture: u32,
        level: i32,
    );
}
extern "C" {
    pub fn glFrontFace(mode: u32);
}
extern "C" {
    pub fn glFrustum(left: f64, right: f64, bottom: f64, top: f64, nearVal: f64, farVal: f64);
}
extern "C" {
    pub fn glFrustumf(left: f32, right: f32, bottom: f32, top: f32, nearVal: f32, farVal: f32);
}
extern "C" {
    pub fn glFrustumx(left: i32, right: i32, bottom: i32, top: i32, nearVal: i32, farVal: i32);
}
extern "C" {
    pub fn glGenBuffers(n: i32, buffers: *mut u32);
}
extern "C" {
    pub fn glGenerateMipmap(target: u32);
}
extern "C" {
    pub fn glGenerateTextureMipmap(target: u32);
}
extern "C" {
    pub fn glGenFramebuffers(n: i32, framebuffers: *mut u32);
}
extern "C" {
    pub fn glGenLists(range: i32) -> u32;
}
extern "C" {
    pub fn glGenRenderbuffers(n: i32, renderbuffers: *mut u32);
}
extern "C" {
    pub fn glGenSamplers(n: i32, samplers: *mut u32);
}
extern "C" {
    pub fn glGenTextures(n: i32, textures: *mut u32);
}
extern "C" {
    pub fn glGenVertexArrays(n: i32, res: *mut u32);
}
extern "C" {
    pub fn glGetActiveAttrib(
        prog: u32,
        index: u32,
        bufSize: i32,
        length: *mut i32,
        size: *mut i32,
        type_: *mut u32,
        name: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glGetActiveUniform(
        prog: u32,
        index: u32,
        bufSize: i32,
        length: *mut i32,
        size: *mut i32,
        type_: *mut u32,
        name: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glGetAttachedShaders(prog: u32, maxCount: i32, count: *mut i32, shads: *mut u32);
}
extern "C" {
    pub fn glGetAttribLocation(prog: u32, name: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn glGetBooleanv(pname: u32, params: *mut u8);
}
extern "C" {
    pub fn glGetBufferParameteriv(target: u32, pname: u32, params: *mut i32);
}
extern "C" {
    pub fn glGetDoublev(pname: u32, data: *mut f64);
}
extern "C" {
    pub fn glGetError() -> u32;
}
extern "C" {
    pub fn glGetFloatv(pname: u32, data: *mut f32);
}
extern "C" {
    pub fn glGetFramebufferAttachmentParameteriv(
        target: u32,
        attachment: u32,
        pname: u32,
        params: *mut i32,
    );
}
extern "C" {
    pub fn glGetIntegerv(pname: u32, data: *mut i32);
}
extern "C" {
    pub fn glGetPointerv(pname: u32, params: *mut *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn glGetProgramBinary(
        program: u32,
        bufSize: i32,
        length: *mut i32,
        binaryFormat: *mut u32,
        binary: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glGetProgramInfoLog(
        program: u32,
        maxLength: i32,
        length: *mut i32,
        infoLog: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glGetProgramiv(program: u32, pname: u32, params: *mut i32);
}
extern "C" {
    pub fn glGetShaderInfoLog(
        handle: u32,
        maxLength: i32,
        length: *mut i32,
        infoLog: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glGetShaderiv(handle: u32, pname: u32, params: *mut i32);
}
extern "C" {
    pub fn glGetShaderSource(
        handle: u32,
        bufSize: i32,
        length: *mut i32,
        source: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn glGetString(name: u32) -> *const u8;
}
extern "C" {
    pub fn glGetStringi(name: u32, index: u32) -> *const u8;
}
extern "C" {
    pub fn glGetTexEnviv(target: u32, pname: u32, params: *mut i32);
}
extern "C" {
    pub fn glGetUniformLocation(prog: u32, name: *const ::std::os::raw::c_char) -> i32;
}
extern "C" {
    pub fn glGetVertexAttribfv(index: u32, pname: u32, params: *mut f32);
}
extern "C" {
    pub fn glGetVertexAttribiv(index: u32, pname: u32, params: *mut i32);
}
extern "C" {
    pub fn glGetVertexAttribPointerv(
        index: u32,
        pname: u32,
        pointer: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glHint(target: u32, mode: u32);
}
extern "C" {
    pub fn glInterleavedArrays(format: u32, stride: i32, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn glIsEnabled(cap: u32) -> u8;
}
extern "C" {
    pub fn glIsFramebuffer(fb: u32) -> u8;
}
extern "C" {
    pub fn glIsProgram(program: u32) -> u8;
}
extern "C" {
    pub fn glIsRenderbuffer(rb: u32) -> u8;
}
extern "C" {
    pub fn glIsTexture(texture: u32) -> u8;
}
extern "C" {
    pub fn glLightfv(light: u32, pname: u32, params: *const f32);
}
extern "C" {
    pub fn glLightModelfv(pname: u32, params: *const f32);
}
extern "C" {
    pub fn glLightModelxv(pname: u32, params: *const i32);
}
extern "C" {
    pub fn glLightxv(light: u32, pname: u32, params: *const i32);
}
extern "C" {
    pub fn glLineWidth(width: f32);
}
extern "C" {
    pub fn glLineWidthx(width: i32);
}
extern "C" {
    pub fn glLinkProgram(progr: u32);
}
extern "C" {
    pub fn glListBase(base: u32);
}
extern "C" {
    pub fn glLoadIdentity();
}
extern "C" {
    pub fn glLoadMatrixf(m: *const f32);
}
extern "C" {
    pub fn glLoadMatrixx(m: *const i32);
}
extern "C" {
    pub fn glLoadTransposeMatrixf(m: *const f32);
}
extern "C" {
    pub fn glLoadTransposeMatrixx(m: *const i32);
}
extern "C" {
    pub fn glMapBuffer(target: u32, access: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glMapBufferRange(
        target: u32,
        offset: i32,
        length: u32,
        access: u32,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn glMaterialf(face: u32, pname: u32, param: f32);
}
extern "C" {
    pub fn glMaterialfv(face: u32, pname: u32, params: *const f32);
}
extern "C" {
    pub fn glMateriali(face: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glMaterialx(face: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glMaterialxv(face: u32, pname: u32, params: *const i32);
}
extern "C" {
    pub fn glMatrixMode(mode: u32);
}
extern "C" {
    pub fn glMultiTexCoord2f(target: u32, s: f32, t: f32);
}
extern "C" {
    pub fn glMultiTexCoord2fv(target: u32, f: *mut f32);
}
extern "C" {
    pub fn glMultiTexCoord2i(target: u32, s: i32, t: i32);
}
extern "C" {
    pub fn glMultMatrixf(m: *const f32);
}
extern "C" {
    pub fn glMultMatrixx(m: *const i32);
}
extern "C" {
    pub fn glMultTransposeMatrixf(m: *const f32);
}
extern "C" {
    pub fn glMultTransposeMatrixx(m: *const i32);
}
extern "C" {
    pub fn glNamedFramebufferRenderbuffer(
        framebuffer: u32,
        attachment: u32,
        renderbuffertarget: u32,
        renderbuffer: u32,
    );
}
extern "C" {
    pub fn glNamedFramebufferTexture(target: u32, attachment: u32, texture: u32, level: i32);
}
extern "C" {
    pub fn glNamedFramebufferTexture2D(
        target: u32,
        attachment: u32,
        textarget: u32,
        texture: u32,
        level: i32,
    );
}
extern "C" {
    pub fn glNamedRenderbufferStorage(target: u32, internalformat: u32, width: i32, height: i32);
}
extern "C" {
    pub fn glNewList(list: u32, mode: u32);
}
extern "C" {
    pub fn glNormal3f(x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn glNormal3fv(v: *const f32);
}
extern "C" {
    pub fn glNormal3s(x: i16, y: i16, z: i16);
}
extern "C" {
    pub fn glNormal3x(x: i32, y: i32, z: i32);
}
extern "C" {
    pub fn glNormalPointer(type_: u32, stride: i32, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn glOrtho(left: f64, right: f64, bottom: f64, top: f64, nearVal: f64, farVal: f64);
}
extern "C" {
    pub fn glOrthof(left: f32, right: f32, bottom: f32, top: f32, nearVal: f32, farVal: f32);
}
extern "C" {
    pub fn glOrthox(left: i32, right: i32, bottom: i32, top: i32, nearVal: i32, farVal: i32);
}
extern "C" {
    pub fn glPixelStorei(pname: u32, param: i32);
}
extern "C" {
    pub fn glPointSize(size: f32);
}
extern "C" {
    pub fn glPointSizex(size: i32);
}
extern "C" {
    pub fn glPolygonMode(face: u32, mode: u32);
}
extern "C" {
    pub fn glPolygonOffset(factor: f32, units: f32);
}
extern "C" {
    pub fn glPolygonOffsetx(factor: i32, units: i32);
}
extern "C" {
    pub fn glPopAttrib();
}
extern "C" {
    pub fn glPopMatrix();
}
extern "C" {
    pub fn glProgramBinary(
        program: u32,
        binaryFormat: u32,
        binary: *const ::std::os::raw::c_void,
        length: i32,
    );
}
extern "C" {
    pub fn glProgramUniform1f(program: u32, location: i32, v0: f32);
}
extern "C" {
    pub fn glProgramUniform1fv(program: u32, location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glProgramUniform1i(program: u32, location: i32, v0: i32);
}
extern "C" {
    pub fn glProgramUniform1iv(program: u32, location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glProgramUniform2f(program: u32, location: i32, v0: f32, v1: f32);
}
extern "C" {
    pub fn glProgramUniform2fv(program: u32, location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glProgramUniform2i(program: u32, location: i32, v0: i32, v1: i32);
}
extern "C" {
    pub fn glProgramUniform2iv(program: u32, location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glProgramUniform3f(program: u32, location: i32, v0: f32, v1: f32, v2: f32);
}
extern "C" {
    pub fn glProgramUniform3fv(program: u32, location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glProgramUniform3i(program: u32, location: i32, v0: i32, v1: i32, v2: i32);
}
extern "C" {
    pub fn glProgramUniform3iv(program: u32, location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glProgramUniform4f(program: u32, location: i32, v0: f32, v1: f32, v2: f32, v3: f32);
}
extern "C" {
    pub fn glProgramUniform4fv(program: u32, location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glProgramUniform4i(program: u32, location: i32, v0: i32, v1: i32, v2: i32, v3: i32);
}
extern "C" {
    pub fn glProgramUniform4iv(program: u32, location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glProgramUniformMatrix2fv(
        program: u32,
        location: i32,
        count: i32,
        transpose: u8,
        value: *const f32,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix3fv(
        program: u32,
        location: i32,
        count: i32,
        transpose: u8,
        value: *const f32,
    );
}
extern "C" {
    pub fn glProgramUniformMatrix4fv(
        program: u32,
        location: i32,
        count: i32,
        transpose: u8,
        value: *const f32,
    );
}
extern "C" {
    pub fn glPushAttrib(mask: u32);
}
extern "C" {
    pub fn glPushMatrix();
}
extern "C" {
    pub fn glReadPixels(
        x: i32,
        y: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glRectf(x1: f32, y1: f32, x2: f32, y2: f32);
}
extern "C" {
    pub fn glRecti(x1: i32, y1: i32, x2: i32, y2: i32);
}
extern "C" {
    pub fn glReleaseShaderCompiler();
}
extern "C" {
    pub fn glRenderbufferStorage(target: u32, internalformat: u32, width: i32, height: i32);
}
extern "C" {
    pub fn glRotated(angle: f64, x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn glRotatef(angle: f32, x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn glRotatex(angle: i32, x: i32, y: i32, z: i32);
}
extern "C" {
    pub fn glSamplerParameterf(sampler: u32, pname: u32, param: f32);
}
extern "C" {
    pub fn glSamplerParameteri(target: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glScaled(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn glScalef(x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn glScalex(x: i32, y: i32, z: i32);
}
extern "C" {
    pub fn glScissor(x: i32, y: i32, width: i32, height: i32);
}
extern "C" {
    pub fn glShadeModel(mode: u32);
}
extern "C" {
    pub fn glShaderBinary(
        count: i32,
        handles: *const u32,
        binaryFormat: u32,
        binary: *const ::std::os::raw::c_void,
        length: i32,
    );
}
extern "C" {
    pub fn glShaderSource(
        handle: u32,
        count: i32,
        string: *const *const ::std::os::raw::c_char,
        length: *const i32,
    );
}
extern "C" {
    pub fn glStencilFunc(func: u32, ref_: i32, mask: u32);
}
extern "C" {
    pub fn glStencilFuncSeparate(face: u32, func: u32, ref_: i32, mask: u32);
}
extern "C" {
    pub fn glStencilMask(mask: u32);
}
extern "C" {
    pub fn glStencilMaskSeparate(face: u32, mask: u32);
}
extern "C" {
    pub fn glStencilOp(sfail: u32, dpfail: u32, dppass: u32);
}
extern "C" {
    pub fn glStencilOpSeparate(face: u32, sfail: u32, dpfail: u32, dppass: u32);
}
extern "C" {
    pub fn glTexCoord2f(s: f32, t: f32);
}
extern "C" {
    pub fn glTexCoord2fv(f: *mut f32);
}
extern "C" {
    pub fn glTexCoord2i(s: i32, t: i32);
}
extern "C" {
    pub fn glTexCoord2s(s: i16, t: i16);
}
extern "C" {
    pub fn glTexCoordPointer(
        size: i32,
        type_: u32,
        stride: i32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTexEnvf(target: u32, pname: u32, param: f32);
}
extern "C" {
    pub fn glTexEnvfv(target: u32, pname: u32, param: *mut f32);
}
extern "C" {
    pub fn glTexEnvi(target: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glTexEnvx(target: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glTexEnvxv(target: u32, pname: u32, param: *mut i32);
}
extern "C" {
    pub fn glTexImage1D(
        target: u32,
        level: i32,
        internalFormat: i32,
        width: i32,
        border: i32,
        format: u32,
        type_: u32,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTexImage2D(
        target: u32,
        level: i32,
        internalFormat: i32,
        width: i32,
        height: i32,
        border: i32,
        format: u32,
        type_: u32,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTexParameterf(target: u32, pname: u32, param: f32);
}
extern "C" {
    pub fn glTexParameteri(target: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glTexParameteriv(target: u32, pname: u32, param: *mut i32);
}
extern "C" {
    pub fn glTexParameterx(target: u32, pname: u32, param: i32);
}
extern "C" {
    pub fn glTexSubImage1D(
        target: u32,
        level: i32,
        xoffset: i32,
        width: i32,
        format: u32,
        type_: u32,
        pixels: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTexSubImage2D(
        target: u32,
        level: i32,
        xoffset: i32,
        yoffset: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        pixels: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glTranslated(x: f64, y: f64, z: f64);
}
extern "C" {
    pub fn glTranslatef(x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn glTranslatex(x: i32, y: i32, z: i32);
}
extern "C" {
    pub fn glUniform1f(location: i32, v0: f32);
}
extern "C" {
    pub fn glUniform1fv(location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glUniform1i(location: i32, v0: i32);
}
extern "C" {
    pub fn glUniform1iv(location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glUniform2f(location: i32, v0: f32, v1: f32);
}
extern "C" {
    pub fn glUniform2fv(location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glUniform2i(location: i32, v0: i32, v1: i32);
}
extern "C" {
    pub fn glUniform2iv(location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glUniform3f(location: i32, v0: f32, v1: f32, v2: f32);
}
extern "C" {
    pub fn glUniform3fv(location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glUniform3i(location: i32, v0: i32, v1: i32, v2: i32);
}
extern "C" {
    pub fn glUniform3iv(location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glUniform4f(location: i32, v0: f32, v1: f32, v2: f32, v3: f32);
}
extern "C" {
    pub fn glUniform4fv(location: i32, count: i32, value: *const f32);
}
extern "C" {
    pub fn glUniform4i(location: i32, v0: i32, v1: i32, v2: i32, v3: i32);
}
extern "C" {
    pub fn glUniform4iv(location: i32, count: i32, value: *const i32);
}
extern "C" {
    pub fn glUniformMatrix2fv(location: i32, count: i32, transpose: u8, value: *const f32);
}
extern "C" {
    pub fn glUniformMatrix3fv(location: i32, count: i32, transpose: u8, value: *const f32);
}
extern "C" {
    pub fn glUniformMatrix4fv(location: i32, count: i32, transpose: u8, value: *const f32);
}
extern "C" {
    pub fn glUnmapBuffer(target: u32) -> u8;
}
extern "C" {
    pub fn glUseProgram(program: u32);
}
extern "C" {
    pub fn glVertex2f(x: f32, y: f32);
}
extern "C" {
    pub fn glVertex2i(x: i32, y: i32);
}
extern "C" {
    pub fn glVertex2fv(v: *const f32);
}
extern "C" {
    pub fn glVertex3f(x: f32, y: f32, z: f32);
}
extern "C" {
    pub fn glVertex3i(x: i32, y: i32, z: i32);
}
extern "C" {
    pub fn glVertex3fv(v: *const f32);
}
extern "C" {
    pub fn glVertexAttrib1f(index: u32, v0: f32);
}
extern "C" {
    pub fn glVertexAttrib1fv(index: u32, v: *const f32);
}
extern "C" {
    pub fn glVertexAttrib2f(index: u32, v0: f32, v1: f32);
}
extern "C" {
    pub fn glVertexAttrib2fv(index: u32, v: *const f32);
}
extern "C" {
    pub fn glVertexAttrib3f(index: u32, v0: f32, v1: f32, v2: f32);
}
extern "C" {
    pub fn glVertexAttrib3fv(index: u32, v: *const f32);
}
extern "C" {
    pub fn glVertexAttrib4f(index: u32, v0: f32, v1: f32, v2: f32, v3: f32);
}
extern "C" {
    pub fn glVertexAttrib4fv(index: u32, v: *const f32);
}
extern "C" {
    pub fn glVertexAttribPointer(
        index: u32,
        size: i32,
        type_: u32,
        normalized: u8,
        stride: i32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glVertexPointer(
        size: i32,
        type_: u32,
        stride: i32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn glViewport(x: i32, y: i32, width: i32, height: i32);
}
extern "C" {
    pub fn gluBuild2DMipmaps(
        target: u32,
        internalFormat: i32,
        width: i32,
        height: i32,
        format: u32,
        type_: u32,
        data: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn gluLookAt(
        eyeX: f64,
        eyeY: f64,
        eyeZ: f64,
        centerX: f64,
        centerY: f64,
        centerZ: f64,
        upX: f64,
        upY: f64,
        upZ: f64,
    );
}
extern "C" {
    pub fn gluPerspective(fovy: f64, aspect: f64, zNear: f64, zFar: f64);
}
extern "C" {
    pub fn eglBindAPI(api: u32) -> i32;
}
extern "C" {
    pub fn eglGetDisplay(
        native_display: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn eglGetError() -> i32;
}
extern "C" {
    pub fn eglGetProcAddress(
        procname: *const ::std::os::raw::c_char,
    ) -> ::std::option::Option<unsafe extern "C" fn(procname: *const ::std::os::raw::c_char)>;
}
extern "C" {
    pub fn eglGetSystemTimeFrequencyNV() -> u64;
}
extern "C" {
    pub fn eglGetSystemTimeNV() -> u64;
}
extern "C" {
    pub fn eglQueryAPI() -> u32;
}
extern "C" {
    pub fn eglSwapInterval(display: *mut ::std::os::raw::c_void, interval: i32) -> i32;
}
extern "C" {
    pub fn eglSwapBuffers(
        display: *mut ::std::os::raw::c_void,
        surface: *mut ::std::os::raw::c_void,
    ) -> i32;
}
extern "C" {
    pub fn vglColorPointer(
        size: i32,
        type_: u32,
        stride: i32,
        count: u32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn vglColorPointerMapped(type_: u32, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglDrawObjects(mode: u32, count: i32, implicit_wvp: u8);
}
extern "C" {
    pub fn vglIndexPointer(
        type_: u32,
        stride: i32,
        count: u32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn vglIndexPointerMapped(pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglTexCoordPointer(
        size: i32,
        type_: u32,
        stride: i32,
        count: u32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn vglTexCoordPointerMapped(pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglVertexPointer(
        size: i32,
        type_: u32,
        stride: i32,
        count: u32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn vglVertexPointerMapped(size: i32, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglBindAttribLocation(
        prog: u32,
        index: u32,
        name: *const ::std::os::raw::c_char,
        num: u32,
        type_: u32,
    );
}
extern "C" {
    pub fn vglBindPackedAttribLocation(
        prog: u32,
        name: *const ::std::os::raw::c_char,
        num: u32,
        type_: u32,
        offset: u32,
        stride: i32,
    ) -> i32;
}
extern "C" {
    pub fn vglVertexAttribPointer(
        index: u32,
        size: i32,
        type_: u32,
        normalized: u8,
        stride: i32,
        count: u32,
        pointer: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn vglVertexAttribPointerMapped(index: u32, pointer: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglGetShaderBinary(
        index: u32,
        bufSize: i32,
        length: *mut i32,
        binary: *mut ::std::os::raw::c_void,
    );
}
pub const vglMemType_VGL_MEM_VRAM: vglMemType = 0;
pub const vglMemType_VGL_MEM_RAM: vglMemType = 1;
pub const vglMemType_VGL_MEM_SLOW: vglMemType = 2;
pub const vglMemType_VGL_MEM_BUDGET: vglMemType = 3;
pub const vglMemType_VGL_MEM_EXTERNAL: vglMemType = 4;
pub const vglMemType_VGL_MEM_ALL: vglMemType = 5;
pub type vglMemType = ::std::os::raw::c_uint;
pub const vglSemanticType_VGL_TYPE_NONE: vglSemanticType = 0;
pub const vglSemanticType_VGL_TYPE_TEXCOORD: vglSemanticType = 1;
pub const vglSemanticType_VGL_TYPE_COLOR: vglSemanticType = 2;
pub const vglSemanticType_VGL_TYPE_FOG: vglSemanticType = 3;
pub type vglSemanticType = ::std::os::raw::c_uint;
pub const vglSemanticMode_VGL_MODE_SHADER_PAIR: vglSemanticMode = 0;
pub const vglSemanticMode_VGL_MODE_GLOBAL: vglSemanticMode = 1;
pub const vglSemanticMode_VGL_MODE_POSTPONED: vglSemanticMode = 2;
pub type vglSemanticMode = ::std::os::raw::c_uint;
extern "C" {
    pub fn vglAddSemanticBinding(
        varying: *const *const ::std::os::raw::c_char,
        index: i32,
        type_: u32,
    );
}
extern "C" {
    pub fn vglAlloc(size: u32, type_: vglMemType) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglBufferData(target: u32, data: *const ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglCalloc(nmember: u32, size: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglCgShaderSource(
        handle: u32,
        count: i32,
        string: *const *const ::std::os::raw::c_char,
        length: *const i32,
    );
}
extern "C" {
    pub fn vglEnd();
}
extern "C" {
    pub fn vglForceAlloc(size: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglFree(addr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglGetFuncName(func: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglGetGxmTexture(target: u32) -> *mut SceGxmTexture;
}
extern "C" {
    pub fn vglGetProcAddress(name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglGetTexDataPointer(target: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglInit(legacy_pool_size: ::std::os::raw::c_int) -> u8;
}
extern "C" {
    pub fn vglInitExtended(
        legacy_pool_size: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        ram_threshold: ::std::os::raw::c_int,
        msaa: SceGxmMultisampleMode,
    ) -> u8;
}
extern "C" {
    pub fn vglInitWithCustomSizes(
        legacy_pool_size: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        ram_pool_size: ::std::os::raw::c_int,
        cdram_pool_size: ::std::os::raw::c_int,
        phycont_pool_size: ::std::os::raw::c_int,
        cdlg_pool_size: ::std::os::raw::c_int,
        msaa: SceGxmMultisampleMode,
    ) -> u8;
}
extern "C" {
    pub fn vglInitWithCustomThreshold(
        pool_size: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        ram_threshold: ::std::os::raw::c_int,
        cdram_threshold: ::std::os::raw::c_int,
        phycont_threshold: ::std::os::raw::c_int,
        cdlg_threshold: ::std::os::raw::c_int,
        msaa: SceGxmMultisampleMode,
    ) -> u8;
}
extern "C" {
    pub fn vglMalloc(size: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglMallocUsableSize(ptr: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn vglMemalign(alignment: u32, size: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglMemFree(type_: vglMemType) -> usize;
}
extern "C" {
    pub fn vglMemTotal(type_: vglMemType) -> usize;
}
extern "C" {
    pub fn vglOverloadTexDataPointer(target: u32, data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn vglRealloc(ptr: *mut ::std::os::raw::c_void, size: u32) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn vglSetDisplayCallback(
        cb: ::std::option::Option<unsafe extern "C" fn(framebuf: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn vglSetFragmentBufferSize(size: u32);
}
extern "C" {
    pub fn vglSetParamBufferSize(size: u32);
}
extern "C" {
    pub fn vglSetSemanticBindingMode(mode: u32);
}
extern "C" {
    pub fn vglSetUSSEBufferSize(size: u32);
}
extern "C" {
    pub fn vglSetVDMBufferSize(size: u32);
}
extern "C" {
    pub fn vglSetVertexBufferSize(size: u32);
}
extern "C" {
    pub fn vglSetVertexPoolSize(size: u32);
}
extern "C" {
    pub fn vglSetupGarbageCollector(
        priority: ::std::os::raw::c_int,
        affinity: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn vglSetupRuntimeShaderCompiler(
        opt_level: shark_opt,
        use_fastmath: i32,
        use_fastprecision: i32,
        use_fastint: i32,
    );
}
extern "C" {
    pub fn vglSwapBuffers(has_commondialog: u8);
}
extern "C" {
    pub fn vglTexImageDepthBuffer(target: u32);
}
extern "C" {
    pub fn vglUseCachedMem(use_: u8);
}
extern "C" {
    pub fn vglUseLowPrecision(val: u8);
}
extern "C" {
    pub fn vglUseTripleBuffering(usage: u8);
}
extern "C" {
    pub fn vglUseVram(usage: u8);
}
extern "C" {
    pub fn vglUseVramForUSSE(usage: u8);
}
extern "C" {
    pub fn vglUseExtraMem(usage: u8);
}
extern "C" {
    pub fn vglWaitVblankStart(enable: u8);
}
